{"version":3,"sources":["webpack:///./src/views/ProjectsDetail.vue","webpack:///./src/views/ProjectsDetail.vue?16d1","webpack:///./src/views/ProjectsDetail.vue?3415","webpack:///./src/services/projects.ts"],"names":["service","projectService","components","ZeitDetail","data","render","ProjectService","formFields","autofocus","type","description","archivedFormFields","isReadOnly","cacheTimeout","resourceId","Promise","resolve","page","pagesize","query","params","url","String","encodeURIComponent","ids","length","join","includeArchived","highlighted","this","_get","promise","_post","then","clearCache"],"mappings":"2NACE,eAAyC,GAA3BA,QAAS,EAAAC,gBAAc,oB,4BCItB,iBAAgB,CAC7BC,WAAY,CACVC,aAAA,MAEFC,KAJ6B,WAK3B,MAAO,CACLH,eAAA,WCRR,EAAOI,OAASA,EAED,gB,wJCaTC,E,wDAGF,iDACI,cAAM,8BACN,EAAKC,WAAa,CACd,IAAI,OAAU,OAAQ,OAAQ,CAAEC,WAAW,IAC3C,IAAI,OAAU,OAAQ,OAAQ,IAC9B,IAAI,OAAU,cAAe,gBAAiB,CAC1CC,KAAM,OACNC,YAAa,qIAEjB,IAAI,OAAU,QAAS,QAAS,CAAED,KAAM,WAG5C,EAAKE,mBAAqB,CACtB,IAAI,OAAU,OAAQ,OAAQ,CAAEC,YAAY,IAC5C,IAAI,OAAU,OAAQ,OAAQ,CAAEA,YAAY,IAC5C,IAAI,OAAU,cAAe,gBAAiB,CAC1CH,KAAM,OACNG,YAAY,EACZF,YAAa,qIAEjB,IAAI,OAAU,QAAS,QAAS,CAAED,KAAM,QAASG,YAAY,KAGjE,EAAKC,aAAe,IAvBxB,E,gEA0BiBC,GAAwC,OAAOC,QAAQC,QAAQ,wB,8CACxDF,GAAwC,OAAOC,QAAQC,QAAQ,yB,2CAClEF,GAAwC,OAAOC,QAAQC,QAAQ,a,0CAChEF,GAAwC,OAAOC,QAAQC,QAAQ,iB,iDACxDF,GAAwC,OAAOC,QAAQC,QAAQ,wB,mCAEvB,IAAxDC,EAAwD,uDAAnD,EAAGC,EAAgD,uDAAvC,GAAIC,EAAmC,uDAA7B,GAAIC,EAAyB,uCAC/DA,EAASA,GAAU,GAEnB,IAAIC,EACA,UAAYC,OAAOJ,GACnB,WAAaI,QAAQL,EAAO,GAAKC,GACjC,MAAQK,mBAAmBD,OAAOH,IAOtC,OALIC,EAAOI,KAAOJ,EAAOI,IAAIC,OAAS,IAAGJ,GAAO,QAAUD,EAAOI,IAAIE,KAAK,OACrEN,EAAOI,KAAOJ,EAAOI,IAAIC,OAAS,GAAML,EAAOO,mBAAiBN,GAAO,qBAExED,EAAOQ,cAAaP,GAAO,gBAExBQ,KAAKC,KAAKT,K,8BAGbP,GAAkB,WAChBiB,EAAUF,KAAKG,MAAMlB,EAAa,YAAa,IAOrD,OAJAiB,EAAQE,MAAK,WACT,EAAKC,gBAGFH,M,GA3Dc,QA+DvB9B,EAAiB,IAAIK,EAIZ","file":"js/chunk-1a7cafce.aecc18d3.js","sourcesContent":["<template>\n  <zeit-detail :service=\"projectService\" />\n</template>\n\n<script lang=\"ts\">\n  import { defineComponent } from 'vue'\n  import { projectService } from '../services/projects';\n  import ZeitDetail from '../components/ui/ZeitDetail.vue';\n\n  export default defineComponent({\n    components: {\n      ZeitDetail,\n    },\n    data() {\n      return {\n        projectService,\n      }\n    },\n  })\n</script>\n","\n  import { defineComponent } from 'vue'\n  import { projectService } from '../services/projects';\n  import ZeitDetail from '../components/ui/ZeitDetail.vue';\n\n  export default defineComponent({\n    components: {\n      ZeitDetail,\n    },\n    data() {\n      return {\n        projectService,\n      }\n    },\n  })\n","import { render } from \"./ProjectsDetail.vue?vue&type=template&id=a58d9f80\"\nimport script from \"./ProjectsDetail.vue?vue&type=script&lang=ts\"\nexport * from \"./ProjectsDetail.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","import { AxiosResponse } from 'axios';\nimport { BaseService, FormField, PaginatedResponse } from './_base';\n\ninterface ProjectListParams {\n    ids?: Array<string>;\n    includeArchived?: boolean;\n    highlighted?: boolean;\n}\n\ninterface Project {\n    id: string;\n    archived_at?: string;\n    name: string;\n    code: string;\n    color: string;\n    total_duration: number;\n}\n\nclass ProjectService extends BaseService<Project> {\n    archivedFormFields: Array<FormField<any>>;\n\n    constructor() {\n        super(\"/api/v2/projects/projects/\");\n        this.formFields = [\n            new FormField(\"name\", \"Name\", { autofocus: true }),\n            new FormField(\"code\", \"Code\", {}),\n            new FormField(\"highlighted\", \"Hervorgehoben\", {\n                type: 'bool',\n                description: \"Hervorgehobene Projekte können schneller durch Mitarbeiter ausgewählt werden. Es können maximal 3 Projekte hervorgehoben werden.\",\n            }),\n            new FormField(\"color\", \"Farbe\", { type: 'color' }),\n        ];\n\n        this.archivedFormFields = [\n            new FormField(\"name\", \"Name\", { isReadOnly: true }),\n            new FormField(\"code\", \"Code\", { isReadOnly: true }),\n            new FormField(\"highlighted\", \"Hervorgehoben\", {\n                type: 'bool',\n                isReadOnly: true,\n                description: \"Hervorgehobene Projekte können schneller durch Mitarbeiter ausgewählt werden. Es können maximal 3 Projekte hervorgehoben werden.\",\n            }),\n            new FormField(\"color\", \"Farbe\", { type: 'color', isReadOnly: true }),\n        ];\n\n        this.cacheTimeout = 60 * 5;\n    }\n\n    newResourceTitle(resourceId?: string): Promise<string> { return Promise.resolve(\"Projekt hinzufügen\") }\n    newResourceConfirmation(resourceId?: string): Promise<string> { return Promise.resolve(\"Projekt hinzugefügt\") }\n    deleteResourceMethod(resourceId?: string): Promise<string> { return Promise.resolve(\"archive\") }\n    deleteResourceTitle(resourceId?: string): Promise<string> { return Promise.resolve(\"Archivieren\") }\n    deleteResourceConfirmation(resourceId?: string): Promise<string> { return Promise.resolve(\"Projekt archiviert\") }\n\n    listParams(page=1, pagesize=50, query='', params: ProjectListParams): Promise<AxiosResponse<PaginatedResponse<Project>>> {\n        params = params || {};\n\n        let url =\n            '?limit=' + String(pagesize) +\n            '&offset=' + String((page - 1) * pagesize) +\n            '&q=' + encodeURIComponent(String(query));\n\n        if (params.ids && params.ids.length > 0) url += '&ids=' + params.ids.join(\"|\");\n        if ((params.ids && params.ids.length > 0) || params.includeArchived) url += '&include-archived';\n\n        if (params.highlighted) url += '&highlighted';\n\n        return this._get(url) as unknown as Promise<AxiosResponse<PaginatedResponse<Project>>>;\n    }\n\n    archive(resourceId: string): Promise<AxiosResponse<Project>> {\n        const promise = this._post(resourceId + \"/archive/\", {});\n\n        // Clean cache after archive request was successfull\n        promise.then(() => {\n            this.clearCache();\n        });\n\n        return promise as unknown as Promise<AxiosResponse<Project>>;\n    }\n}\n\nconst projectService = new ProjectService();\n\nexport { projectService, ProjectService, Project };\n\nexport default projectService;\n"],"sourceRoot":""}