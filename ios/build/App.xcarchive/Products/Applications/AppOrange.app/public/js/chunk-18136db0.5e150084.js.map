{"version":3,"sources":["webpack:///./src/views/Projects.vue","webpack:///./src/views/Projects.vue?ee64","webpack:///./src/views/Projects.vue?82eb","webpack:///./src/services/projects.ts"],"names":["resourceType","basePath","searchPlaceholder","service","projectService","fields","no-results","no-results-add","components","ZeitList","data","id","label","mobileLevel","hideDesktop","formatter","e","highlighted","promise","total_duration","then","result","render","ProjectService","formFields","autofocus","type","description","archivedFormFields","isReadOnly","cacheTimeout","resourceId","Promise","resolve","page","pagesize","query","params","url","String","encodeURIComponent","ids","length","join","includeArchived","this","_get","_post","clearCache"],"mappings":"wJAQoC,yC,iBACI,sF,kFARpC,eASY,GARRA,aAAa,WACbC,SAAS,aACTC,kBAAkB,4BACjBC,QAAS,EAAAC,eACTC,OAAQ,EAAAA,Q,CAEQC,aAAU,gBAAC,iBAAqC,C,MAChDC,iBAAc,gBAAC,iBAAkF,C,mGCDvG,iBAAgB,CAC3BC,WAAY,CACRC,WAAA,MAEJC,KAJ2B,WAKvB,MAAO,CACHN,eAAA,OACAC,OAAQ,CACJ,CACIM,GAAI,OACJC,MAAO,OACPC,YAAa,MAEjB,CACIF,GAAI,cACJG,aAAa,EACbD,YAAa,WACbE,UAAW,SAACC,GACR,GAAIA,EAAEC,YAAa,OAAO,IAAI,OAAQ,UAI9C,CACIN,GAAI,OACJC,MAAO,OACPC,YAAa,KAEjB,CACIF,GAAI,QACJC,MAAO,eACPC,YAAa,eAEjB,CACIF,GAAI,iBACJC,MAAO,gBACPC,YAAa,IACbK,QAAS,SAACF,GACN,OAAO,eAAeA,EAAEG,gBAAgBC,MAAK,SAAAC,GAAM,OAAIA,EAAS,eC1C5F,EAAOC,OAASA,EAED,gB,wJCaTC,E,wDAGF,iDACI,cAAM,8BACN,EAAKC,WAAa,CACd,IAAI,OAAU,OAAQ,OAAQ,CAAEC,WAAW,IAC3C,IAAI,OAAU,OAAQ,OAAQ,IAC9B,IAAI,OAAU,cAAe,gBAAiB,CAC1CC,KAAM,OACNC,YAAa,qIAEjB,IAAI,OAAU,QAAS,QAAS,CAAED,KAAM,WAG5C,EAAKE,mBAAqB,CACtB,IAAI,OAAU,OAAQ,OAAQ,CAAEC,YAAY,IAC5C,IAAI,OAAU,OAAQ,OAAQ,CAAEA,YAAY,IAC5C,IAAI,OAAU,cAAe,gBAAiB,CAC1CH,KAAM,OACNG,YAAY,EACZF,YAAa,qIAEjB,IAAI,OAAU,QAAS,QAAS,CAAED,KAAM,QAASG,YAAY,KAGjE,EAAKC,aAAe,IAvBxB,E,gEA0BiBC,GAAwC,OAAOC,QAAQC,QAAQ,wB,8CACxDF,GAAwC,OAAOC,QAAQC,QAAQ,yB,2CAClEF,GAAwC,OAAOC,QAAQC,QAAQ,a,0CAChEF,GAAwC,OAAOC,QAAQC,QAAQ,iB,iDACxDF,GAAwC,OAAOC,QAAQC,QAAQ,wB,mCAEvB,IAAxDC,EAAwD,uDAAnD,EAAGC,EAAgD,uDAAvC,GAAIC,EAAmC,uDAA7B,GAAIC,EAAyB,uCAC/DA,EAASA,GAAU,GAEnB,IAAIC,EACA,UAAYC,OAAOJ,GACnB,WAAaI,QAAQL,EAAO,GAAKC,GACjC,MAAQK,mBAAmBD,OAAOH,IAOtC,OALIC,EAAOI,KAAOJ,EAAOI,IAAIC,OAAS,IAAGJ,GAAO,QAAUD,EAAOI,IAAIE,KAAK,OACrEN,EAAOI,KAAOJ,EAAOI,IAAIC,OAAS,GAAML,EAAOO,mBAAiBN,GAAO,qBAExED,EAAOpB,cAAaqB,GAAO,gBAExBO,KAAKC,KAAKR,K,8BAGbP,GAAkB,WAChBb,EAAU2B,KAAKE,MAAMhB,EAAa,YAAa,IAOrD,OAJAb,EAAQE,MAAK,WACT,EAAK4B,gBAGF9B,M,GA3Dc,QA+DvBd,EAAiB,IAAImB,EAIZ","file":"js/chunk-18136db0.5e150084.js","sourcesContent":["<template>\n    <zeit-list\n        resourceType=\"Projekte\"\n        basePath=\"/projects/\"\n        searchPlaceholder=\"Suche nach Name oder Code\"\n        :service=\"projectService\"\n        :fields=\"fields\"\n    >\n        <template v-slot:no-results>Es existieren aktuell keine Projekte.</template>\n        <template v-slot:no-results-add>Sobald du ein Projekt erstellst, können Arbeitszeiten Projekten zugewiesen werden.</template>\n    </zeit-list>\n</template>\n\n<script lang=\"ts\">\n    import { defineComponent } from 'vue';\n    import { star } from 'ionicons/icons';\n    import ZeitList from '../components/ui/ZeitList.vue';\n    import projectService from '../services/projects';\n    import { formatDuration } from '../globals/helpers';\n    import { RowIcon } from '../components/ui/ZeitGrid.vue';\n\n    export default defineComponent({\n        components: {\n            ZeitList,\n        },\n        data() {\n            return {\n                projectService,\n                fields: [\n                    {\n                        id: \"name\",\n                        label: \"Name\",\n                        mobileLevel: \"h2\",\n                    },\n                    {\n                        id: \"highlighted\",\n                        hideDesktop: true,\n                        mobileLevel: \"h2-icons\",\n                        formatter: (e: any) => {\n                            if (e.highlighted) return new RowIcon(star);\n                            return undefined;\n                        }\n                    },\n                    {\n                        id: \"code\",\n                        label: \"Code\",\n                        mobileLevel: \"p\",\n                    },\n                    {\n                        id: \"color\",\n                        label: \"Projektfarbe\",\n                        mobileLevel: \"colorborder\",\n                    },\n                    {\n                        id: \"total_duration\",\n                        label: \"Erfasste Zeit\",\n                        mobileLevel: \"p\",\n                        promise: (e: any): Promise<string> => {\n                            return formatDuration(e.total_duration).then(result => result + \" h\");\n                        },\n                    },\n                ],\n            }\n        },\n    })\n</script>\n","\n    import { defineComponent } from 'vue';\n    import { star } from 'ionicons/icons';\n    import ZeitList from '../components/ui/ZeitList.vue';\n    import projectService from '../services/projects';\n    import { formatDuration } from '../globals/helpers';\n    import { RowIcon } from '../components/ui/ZeitGrid.vue';\n\n    export default defineComponent({\n        components: {\n            ZeitList,\n        },\n        data() {\n            return {\n                projectService,\n                fields: [\n                    {\n                        id: \"name\",\n                        label: \"Name\",\n                        mobileLevel: \"h2\",\n                    },\n                    {\n                        id: \"highlighted\",\n                        hideDesktop: true,\n                        mobileLevel: \"h2-icons\",\n                        formatter: (e: any) => {\n                            if (e.highlighted) return new RowIcon(star);\n                            return undefined;\n                        }\n                    },\n                    {\n                        id: \"code\",\n                        label: \"Code\",\n                        mobileLevel: \"p\",\n                    },\n                    {\n                        id: \"color\",\n                        label: \"Projektfarbe\",\n                        mobileLevel: \"colorborder\",\n                    },\n                    {\n                        id: \"total_duration\",\n                        label: \"Erfasste Zeit\",\n                        mobileLevel: \"p\",\n                        promise: (e: any): Promise<string> => {\n                            return formatDuration(e.total_duration).then(result => result + \" h\");\n                        },\n                    },\n                ],\n            }\n        },\n    })\n","import { render } from \"./Projects.vue?vue&type=template&id=5580178a\"\nimport script from \"./Projects.vue?vue&type=script&lang=ts\"\nexport * from \"./Projects.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","import { AxiosResponse } from 'axios';\nimport { BaseService, FormField, PaginatedResponse } from './_base';\n\ninterface ProjectListParams {\n    ids?: Array<string>;\n    includeArchived?: boolean;\n    highlighted?: boolean;\n}\n\ninterface Project {\n    id: string;\n    archived_at?: string;\n    name: string;\n    code: string;\n    color: string;\n    total_duration: number;\n}\n\nclass ProjectService extends BaseService<Project> {\n    archivedFormFields: Array<FormField<any>>;\n\n    constructor() {\n        super(\"/api/v2/projects/projects/\");\n        this.formFields = [\n            new FormField(\"name\", \"Name\", { autofocus: true }),\n            new FormField(\"code\", \"Code\", {}),\n            new FormField(\"highlighted\", \"Hervorgehoben\", {\n                type: 'bool',\n                description: \"Hervorgehobene Projekte können schneller durch Mitarbeiter ausgewählt werden. Es können maximal 3 Projekte hervorgehoben werden.\",\n            }),\n            new FormField(\"color\", \"Farbe\", { type: 'color' }),\n        ];\n\n        this.archivedFormFields = [\n            new FormField(\"name\", \"Name\", { isReadOnly: true }),\n            new FormField(\"code\", \"Code\", { isReadOnly: true }),\n            new FormField(\"highlighted\", \"Hervorgehoben\", {\n                type: 'bool',\n                isReadOnly: true,\n                description: \"Hervorgehobene Projekte können schneller durch Mitarbeiter ausgewählt werden. Es können maximal 3 Projekte hervorgehoben werden.\",\n            }),\n            new FormField(\"color\", \"Farbe\", { type: 'color', isReadOnly: true }),\n        ];\n\n        this.cacheTimeout = 60 * 5;\n    }\n\n    newResourceTitle(resourceId?: string): Promise<string> { return Promise.resolve(\"Projekt hinzufügen\") }\n    newResourceConfirmation(resourceId?: string): Promise<string> { return Promise.resolve(\"Projekt hinzugefügt\") }\n    deleteResourceMethod(resourceId?: string): Promise<string> { return Promise.resolve(\"archive\") }\n    deleteResourceTitle(resourceId?: string): Promise<string> { return Promise.resolve(\"Archivieren\") }\n    deleteResourceConfirmation(resourceId?: string): Promise<string> { return Promise.resolve(\"Projekt archiviert\") }\n\n    listParams(page=1, pagesize=50, query='', params: ProjectListParams): Promise<AxiosResponse<PaginatedResponse<Project>>> {\n        params = params || {};\n\n        let url =\n            '?limit=' + String(pagesize) +\n            '&offset=' + String((page - 1) * pagesize) +\n            '&q=' + encodeURIComponent(String(query));\n\n        if (params.ids && params.ids.length > 0) url += '&ids=' + params.ids.join(\"|\");\n        if ((params.ids && params.ids.length > 0) || params.includeArchived) url += '&include-archived';\n\n        if (params.highlighted) url += '&highlighted';\n\n        return this._get(url) as unknown as Promise<AxiosResponse<PaginatedResponse<Project>>>;\n    }\n\n    archive(resourceId: string): Promise<AxiosResponse<Project>> {\n        const promise = this._post(resourceId + \"/archive/\", {});\n\n        // Clean cache after archive request was successfull\n        promise.then(() => {\n            this.clearCache();\n        });\n\n        return promise as unknown as Promise<AxiosResponse<Project>>;\n    }\n}\n\nconst projectService = new ProjectService();\n\nexport { projectService, ProjectService, Project };\n\nexport default projectService;\n"],"sourceRoot":""}