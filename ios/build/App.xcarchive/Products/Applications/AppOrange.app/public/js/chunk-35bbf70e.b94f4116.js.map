{"version":3,"sources":["webpack:///./src/views/DepartmentsDetail.vue","webpack:///./src/views/DepartmentsDetail.vue?bdad","webpack:///./src/views/DepartmentsDetail.vue?b532","webpack:///./src/services/employee-groups.ts","webpack:///./src/services/physical-tokens.ts","webpack:///./src/services/employees.ts"],"names":["service","employeeGroupService","$route","params","id","button","detail","isLoadingEmployees","showEmployees","slot","components","ZeitDetail","IonSpinner","IonItem","IonLabel","data","employeeService","methods","this","listParams","employeeGroups","then","path","fullPath","$router","push","render","EmployeeGroupService","formFields","autofocus","mobileType","cacheTimeout","resourceId","Promise","resolve","pagesize","page","query","url","String","encodeURIComponent","ids","join","_get","PhysicalTokenService","fields","_post","additionalCardNumber","physicalTokenService","EmployeeService","type","remoteSourceService","remoteSourceAttribute","description","remoteSourceListMethod","listPageSize","concat","name","isReadOnly","showCreate","archivedFormFields","filterAttributes","visible","showArchived","response","count","undefined","multiple","resource","first_name","last_name","retrieve","employeeResponse","can_be_deleted","archived_at","categoryId","settingId","retrieveSettings","employeeSettings","retrieveSettingValue","newSettings","verbosity","minimumAbsenceCount","absenceDaterange","useCache"],"mappings":"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","file":"js/chunk-35bbf70e.b94f4116.js","sourcesContent":["<template>\n  <zeit-detail :service=\"employeeGroupService\">\n      <template v-slot:after-form v-if=\"$route.params.id\">\n        <ion-item button :detail=\"!isLoadingEmployees\" @click=\"showEmployees()\">\n            <ion-label>Mitarbeiter anzeigen</ion-label>\n            <ion-spinner slot=\"end\" v-if=\"isLoadingEmployees\" />\n        </ion-item>\n      </template>\n  </zeit-detail>\n</template>\n\n<script lang=\"ts\">\n  import { defineComponent } from 'vue'\n  import { employeeGroupService } from '../services/employee-groups';\n  import { employeeService } from '../services/employees';\n  import ZeitDetail from '../components/ui/ZeitDetail.vue';\n\n  import { IonSpinner, IonItem, IonLabel } from '@ionic/vue';\n\n  export default defineComponent({\n    components: {\n      ZeitDetail,\n      IonSpinner,\n      IonItem,\n      IonLabel,\n    },\n    data() {\n      return {\n        employeeGroupService,\n        employeeService,\n\n        isLoadingEmployees: false,\n      }\n    },\n    methods: {\n        showEmployees() {\n            this.isLoadingEmployees = true;\n            this.employeeService.listParams({employeeGroups: [this.$route.params.id as string]}).then(() => {\n                const path = this.$route.fullPath + \"employees/\";\n\n                this.$router.push({path}).then(() => {\n                    this.isLoadingEmployees = false;\n                });\n            });\n        },\n    },\n  })\n</script>\n","\n  import { defineComponent } from 'vue'\n  import { employeeGroupService } from '../services/employee-groups';\n  import { employeeService } from '../services/employees';\n  import ZeitDetail from '../components/ui/ZeitDetail.vue';\n\n  import { IonSpinner, IonItem, IonLabel } from '@ionic/vue';\n\n  export default defineComponent({\n    components: {\n      ZeitDetail,\n      IonSpinner,\n      IonItem,\n      IonLabel,\n    },\n    data() {\n      return {\n        employeeGroupService,\n        employeeService,\n\n        isLoadingEmployees: false,\n      }\n    },\n    methods: {\n        showEmployees() {\n            this.isLoadingEmployees = true;\n            this.employeeService.listParams({employeeGroups: [this.$route.params.id as string]}).then(() => {\n                const path = this.$route.fullPath + \"employees/\";\n\n                this.$router.push({path}).then(() => {\n                    this.isLoadingEmployees = false;\n                });\n            });\n        },\n    },\n  })\n","import { render } from \"./DepartmentsDetail.vue?vue&type=template&id=1a4ab420\"\nimport script from \"./DepartmentsDetail.vue?vue&type=script&lang=ts\"\nexport * from \"./DepartmentsDetail.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","import {BaseService, FormField} from './_base';\n\n\ninterface EmployeeGroup {\n    id: string;\n    name: string;\n    employee_count: number;\n}\n\n\ninterface EmployeeGroupListParams {\n    page?: number;\n    pagesize?: number;\n    query?: string;\n    ids?: Array<string>;\n}\n\n\nclass EmployeeGroupService extends BaseService<EmployeeGroup> {\n    constructor() {\n        super(\"/api/v2/employees/groups/\");\n        this.formFields = [\n            new FormField(\"name\", \"Abteilungsname\", { autofocus: true, mobileType: 'stacked'}),\n        ];\n\n        this.cacheTimeout = 60 * 60 * 24 * 14;\n    }\n\n    newResourceTitle(resourceId?: string): Promise<string> { return Promise.resolve(\"Abteilung hinzufügen\") }\n    newResourceConfirmation(resourceId?: string): Promise<string> { return Promise.resolve(\"Abteilung hinzugefügt\") }\n    deleteResourceMethod(resourceId?: string): Promise<string> { return Promise.resolve(\"delete\") }\n    deleteResourceTitle(resourceId?: string): Promise<string> { return Promise.resolve(\"Entfernen\") }\n    deleteResourceConfirmation(resourceId?: string): Promise<string> { return Promise.resolve(\"Abteilung entfernt\") }\n\n    listParams(params: EmployeeGroupListParams) {\n        const pagesize = params.pagesize || 50;\n        const page = params.page || 1;\n        const query = params.query || '';\n\n        let url =\n            '?limit=' + String(pagesize) +\n            '&offset=' + String((page - 1) * pagesize) +\n            '&q=' + encodeURIComponent(String(query));\n\n            if (params.ids) url += \"&ids=\" + params.ids.join(\"|\");\n\n        return this._get(url);\n    }\n}\n\nconst employeeGroupService = new EmployeeGroupService();\n\nexport { EmployeeGroup, EmployeeGroupService, employeeGroupService }\n\nexport default employeeGroupService;\n","import { AxiosResponse } from 'axios';\nimport { BaseService, PaginatedResponse } from './_base';\n\n\ninterface PhysicalToken {\n    id: string;\n}\n\ninterface PhysicalTokenListParams {\n    page?: number;\n    pagesize?: number;\n\n    query?: string;\n    ids?: Array<string>;\n\n    fields?: Array<string>;\n}\n\n\nclass PhysicalTokenService extends BaseService<PhysicalToken> {\n    constructor() {\n        super(\"/api/v2/devices/physical-tokens/\");\n        this.cacheTimeout = 60 * 60 * 24 * 14;\n    }\n\n    list(this: PhysicalTokenService, page=1, pagesize=1000, query=''): Promise<AxiosResponse<PaginatedResponse<PhysicalToken>>> {\n        const params =\n            '?limit=' + String(pagesize) +\n            '&offset=' + String((page - 1) * pagesize) +\n            '&q=' + encodeURIComponent(String(query));\n\n        return this._get(params) as unknown as Promise<AxiosResponse<PaginatedResponse<PhysicalToken>>>;\n    }\n\n    listParams(this: PhysicalTokenService, params: PhysicalTokenListParams): Promise<PaginatedResponse<PhysicalToken>> {\n        params = params || {};\n\n        params.pagesize = params.pagesize || 1000;\n        params.page = params.page || 1;\n        params.query = params.query || '';\n        params.fields = params.fields || ['id'];\n        params.ids = params.ids || [];\n\n        const query =\n            '?limit=' + String(params.pagesize) +\n            '&offset=' + String((params.page - 1) * params.pagesize) +\n            '&q=' + encodeURIComponent(String(params.query)) +\n            '&fields=' + params.fields.join(\"|\") +\n            '&ids=' + params.ids.join(\"|\");\n\n        return this._get(query) as unknown as Promise<PaginatedResponse<PhysicalToken>>;\n    }\n\n    listCreate(this: PhysicalTokenService, ids: Array<string>) {\n        return this._post('', {ids, });\n    }\n\n    listDelete(this: PhysicalTokenService, ids: Array<string>) {\n        return this._post('delete/', {ids, });\n    }\n\n    listAvailable(page=1, pagesize=50, query='', additionalCardNumber=''): Promise<PaginatedResponse<PhysicalToken>> {\n        const params =\n            '?limit=' + String(pagesize) +\n            '&offset=' + String((page - 1) * pagesize) +\n            '&type=available' +\n            '&q=' + encodeURIComponent(String(query)) +\n            '&additional=' + String(additionalCardNumber);\n\n        return this._get(params) as unknown as Promise<PaginatedResponse<PhysicalToken>>;\n    }\n}\n\nconst physicalTokenService = new PhysicalTokenService();\n\nexport { physicalTokenService, PhysicalTokenService, PhysicalToken }\n\nexport default physicalTokenService;\n","import { BaseService, FormField, FilterAttribute, PaginatedResponse } from './_base';\n\nimport { employeeGroupService, EmployeeGroup } from './employee-groups';\nimport { physicalTokenService, PhysicalToken } from './physical-tokens';\nimport { institutionService } from './institutions';\n\nimport branding from '../branding';\nimport { AxiosResponse } from 'axios';\n\ninterface Employee {\n    id: string;\n    created_at: string;\n    modified_at: string;\n    archived_at?: string;\n    username: string;\n    user_account_id: string;\n    employee_group_id?: string;\n    external_id?: string;\n    accounting_number?: string;\n    employee_group_name?: string;\n    is_male: boolean;\n    first_name: string;\n    last_name: string;\n    email?: string;\n    initial_password: string;\n    physical_token_id?: string;\n    can_be_deleted: boolean;\n    delete_after_archive_period?: number;\n}\n\ninterface EmployeesListParams {\n    page?: number;\n    pagesize?: number;\n    query?: string;\n    useCache?: boolean;\n\n    verbosity?: string;\n\n    ids?: Array<string>;\n    employeeGroups?: Array<string>;\n    showArchived?: boolean;\n    minimumAbsenceCount?: number;\n    absenceDaterange?: string;\n}\n\n\nclass EmployeeService extends BaseService<Employee> {\n    archivedFormFields: Array<FormField<any>>;\n\n    constructor() {\n        super(\"/api/v2/employees/employees/\");\n        this.formFields = [\n            new FormField<Employee>(\"first_name\", \"Vorname\", {autofocus: true}),\n            new FormField<Employee>(\"last_name\", \"Nachname\"),\n            new FormField<Employee>(\"email\", \"E-Mail-Adresse\", {\n                mobileType: \"stacked\",\n            }),\n            new FormField<EmployeeGroup>(\"employee_group_id\", \"Abteilung\", {\n                type: 'select',\n                remoteSourceService: employeeGroupService,\n                remoteSourceAttribute: \"name\"\n            }),\n            new FormField<PhysicalToken>(\"physical_token_id\", \"Token-Nummer\", {\n                type: 'select',\n                description: \"Die ausgewählte Token-Nummer kann zur Authentifizierung am Zeiterfassungs-Terminal verwendet werden. Nur nicht bereits zugewiesene Nummern werden angezeigt. <a target='_blank' href='/tokens/'>Token verwalten</a>\",\n                remoteSourceService: physicalTokenService,\n                remoteSourceListMethod: \"listAvailable\",\n                remoteSourceAttribute: 'id',\n                listPageSize: 1000,\n            }),\n            new FormField<Employee>(\"accounting_number\", \"Personalnummer\", { mobileType: 'stacked', description: \"Die Personalnummer wird verwendet, um den Mitarbeiter im Buchhaltungsexport zu identifizieren.\"}),\n        ];\n        if (branding.id == \"orange\")\n            this.formFields.push(new FormField<Employee>(\"external_id\", \"aQrate Benutzername\", { mobileType: 'stacked', description:  \"Der Benutzername wird verwendet, um diesen Zeitblick Mitarbeiter einem aQrate Mitarbeiter bei Authentifizierung am MFP zuzuordnen.\"}));\n        this.formFields = this.formFields.concat([\n            new FormField<Employee>(\"username\", branding.name + \" Benutzername\", {\n                mobileType: 'stacked',\n                description: \"Der Benutzername wird vom Mitarbeiter benötigt, um sich gegenüber der \" + branding.name + \" Smartphone App und dem Web-Login (https://\" + branding.url + \"/) zu authentifizieren.\",\n                isReadOnly: true,\n                showCreate: false,\n            }),\n            new FormField<Employee>(\"initial_password\", \"Vorläufiges Passwort\", { mobileType: 'stacked', isReadOnly: true, showCreate: false, }),\n        ]);\n\n        this.archivedFormFields = [\n            new FormField<Employee>(\"first_name\", \"Vorname\", {isReadOnly: true}),\n            new FormField<Employee>(\"last_name\", \"Nachname\", { isReadOnly: true }),\n            new FormField<Employee>(\"email\", \"E-Mail-Adresse\", { isReadOnly: true }),\n            new FormField<EmployeeGroup>(\"employee_group_id\", \"Abteilung\", {\n                type: 'select',\n                remoteSourceService: employeeGroupService,\n                remoteSourceAttribute: \"name\",\n                isReadOnly: true,\n            }),\n            new FormField<Employee>(\"accounting_id\", \"Personalnummer\", { description: \"Die Personalnummer wird verwendet, um den Mitarbeiter im Buchhaltungsexport zu identifizieren.\" , isReadOnly: true}),\n        ];\n        if (branding.id == \"orange\")\n            this.archivedFormFields.push(new FormField<Employee>(\"external_id\", \"aQrate Benutzername\", { description: \"Der Benutzername wird verwendet, um diesen Zeitblick Mitarbeiter einem aQrate Mitarbeiter bei Authentifizierung am MFP zuzuordnen.\", isReadOnly: true }));\n\n        this.filterAttributes = [\n            new FilterAttribute(\"showArchived\", \"Archivierte Mitarbeiter anzeigen\", \"boolean\", false, {\n                visible: this.listParams({ showArchived: true}).then((response: AxiosResponse<PaginatedResponse<EmployeeGroup>>) => {\n                    return response.data.count > 0;\n                }),\n            }),\n            new FilterAttribute(\"employeeGroups\", \"Abteilungen\", \"select\", undefined, {\n                multiple: true,\n                remoteSourceService: employeeGroupService,\n                visible: employeeGroupService.listParams({}).then((response: AxiosResponse<PaginatedResponse<EmployeeGroup>>) => {\n                    return response.data.count > 0;\n                }),\n            }),\n        ];\n\n        this.cacheTimeout = 60 * 60 * 24 * 14;\n    }\n\n    titleAttribute(): Promise<any> { return Promise.resolve((resource: any) => resource.first_name + \" \" + resource.last_name) }\n    newResourceTitle(resourceId?: string): Promise<string> { return Promise.resolve(\"Mitarbeiter hinzufügen\") }\n    newResourceConfirmation(resourceId?: string): Promise<string> { return Promise.resolve(\"Mitarbeiter hinzugefügt\") }\n\n    deleteResourceMethod(resourceId?: string): Promise<string> {\n        if (!resourceId) return Promise.resolve('');\n\n        return this.retrieve(resourceId).then(employeeResponse => {\n            if (employeeResponse.data.can_be_deleted) {\n                return Promise.resolve(\"delete\");\n            } else if (!employeeResponse.data.archived_at) {\n                return Promise.resolve(\"archive\");\n            }\n\n            return Promise.resolve('');\n        });\n    }\n    deleteResourceTitle(resourceId?: string): Promise<string> {\n        if (!resourceId) return Promise.resolve(\"Entfernen\");\n\n        return this.retrieve(resourceId).then(employeeResponse => {\n            if (employeeResponse.data.can_be_deleted) {\n                return Promise.resolve(\"Entfernen\");\n            } else if (!employeeResponse.data.archived_at) {\n                return Promise.resolve(\"Archivieren\");\n            }\n\n            return Promise.resolve('');\n        });\n    }\n    deleteResourceConfirmation(resourceId?: string): Promise<string> {\n        if (!resourceId) return Promise.resolve(\"Mitarbeiter entfernt\");\n\n        return this.retrieve(resourceId).then(employeeResponse => {\n            if (employeeResponse.data.can_be_deleted) {\n                return Promise.resolve(\"Mitarbeiter entfernt\");\n            } else if (!employeeResponse.data.archived_at) {\n                return Promise.resolve(\"Mitarbeiter archiviert\");\n            }\n\n            return Promise.resolve('');\n        });\n    }\n\n    async retrieveSettingValue(resourceId: string, categoryId: string, settingId: string): Promise<any> {\n        const employeeSettings = (await this.retrieveSettings(resourceId)).data;\n        if (categoryId in employeeSettings && settingId in employeeSettings[categoryId]) {\n            return employeeSettings[categoryId][settingId]\n        }\n\n        return institutionService.retrieveSettingValue(categoryId, settingId);\n\n    }\n\n    retrieveSettings(resourceId: string): Promise<AxiosResponse<any>> {\n        return this._get(resourceId + \"/settings/\") as unknown as Promise<AxiosResponse<any>>;\n    }\n\n    updateSettings(resourceId: string, newSettings: any) {\n        return this._post(resourceId + \"/settings/\", newSettings);\n    }\n\n    resetPassword(resourceId: string) {\n        return this._post(resourceId + \"/reset-password/\", {});\n    }\n\n    list(page=1, pagesize=50, query='', employeeGroups?: string, showArchived?: boolean) {\n        let params =\n            '?limit=' + String(pagesize) +\n            '&offset=' + String((page - 1) * pagesize) +\n            '&q=' + encodeURIComponent(String(query));\n\n        if (employeeGroups != undefined) {\n            params = params + '&employee_groups=' + employeeGroups;\n        }\n\n        if (showArchived === true) {\n            params = params + '&archived';\n        }\n\n        return this._get(params);\n    }\n\n    listParams(params: EmployeesListParams) {\n        const pagesize = params.pagesize || 50;\n        const page = params.page || 1;\n        const query = params.query || '';\n\n        let url =\n            '?limit=' + String(pagesize) +\n            '&offset=' + String((page - 1) * pagesize) +\n            '&q=' + encodeURIComponent(String(query));\n\n        if (params.verbosity) url += \"&verbosity=\" + params.verbosity;\n        if (params.ids) url += \"&ids=\" + params.ids.join(\"|\");\n        if (params.employeeGroups) url += \"&employee_groups=\" + params.employeeGroups.join(\"|\");\n        if (params.showArchived === true) url = url + '&archived';\n        if (params.minimumAbsenceCount) url = url + '&absence_count__gte=' + String(params.minimumAbsenceCount);\n        if (params.absenceDaterange) url = url + '&absence_daterange=' + params.absenceDaterange;\n\n        return this._get(url, params.useCache !== false);\n    }\n\n    archive(resourceId: string) {\n        return this._post(resourceId + \"/archive/\", {});\n    }\n}\n\nconst employeeService = new EmployeeService();\n\nexport { EmployeeService, employeeService, Employee };\n\nexport default employeeService;\n"],"sourceRoot":""}