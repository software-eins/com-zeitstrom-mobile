{"version":3,"sources":["webpack:///./src/views/EmployeesDetail.vue","webpack:///./src/globals/clipboard.ts","webpack:///./src/views/EmployeesDetail.vue?3426","webpack:///./src/views/EmployeesDetail.vue?02f2","webpack:///./src/services/employee-groups.ts","webpack:///./src/services/physical-tokens.ts","webpack:///./src/services/employees.ts"],"names":["class","isLoaded","service","employeeService","extraActions","isEditable","employee","archived_at","ref","color","formatLongDate","delete_after_archive_period","Clipboard","text","write","string","create","message","duration","then","toast","present","components","IonItem","ZeitDetail","data","undefined","username","initial_password","resetPassword","id","employeeDetail","$refs","detailForm","form","reloadRemoteResource","copyRemoteResource","beforeMount","this","$route","params","retrieve","response","render","EmployeeGroupService","formFields","autofocus","mobileType","cacheTimeout","resourceId","Promise","resolve","pagesize","page","query","url","String","encodeURIComponent","ids","join","_get","employeeGroupService","PhysicalTokenService","fields","_post","additionalCardNumber","physicalTokenService","EmployeeService","type","remoteSourceService","remoteSourceAttribute","description","remoteSourceListMethod","listPageSize","push","concat","name","isReadOnly","showCreate","archivedFormFields","filterAttributes","visible","listParams","showArchived","count","multiple","resource","first_name","last_name","employeeResponse","can_be_deleted","categoryId","settingId","retrieveSettings","employeeSettings","retrieveSettingValue","newSettings","employeeGroups","verbosity","minimumAbsenceCount","absenceDaterange","useCache"],"mappings":"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","file":"js/chunk-599eda87.9b773b20.js","sourcesContent":["<template>\n  <zeit-detail\n    v-if=\"isLoaded\"\n    :service=\"employeeService\"\n    :extraActions=\"extraActions\"\n    :isEditable=\"!employee || !employee.archived_at\"\n    ref=\"employeeDetail\"\n  >\n    <template v-slot:before-form v-if=\"employee && employee.archived_at\">\n        <ion-item color=\"warning\">\n            <div class=\"py-4 text-sm\">\n                Dieser Mitarbeiter wurde am {{ formatLongDate(employee.archived_at) }}\n                archiviert. Nach Ablauf der Aufbewahrungsfrist von {{ employee.delete_after_archive_period }}\n                Jahren kann der Mitarbeiter gelöscht werden.\n            </div>\n        </ion-item>\n    </template>\n  </zeit-detail>\n</template>\n\n<script lang=\"ts\">\n  import { defineComponent } from 'vue'\n  import { Employee, employeeService } from '../services/employees';\n  import ZeitDetail, { DetailAction } from '../components/ui/ZeitDetail.vue';\n  import { IonItem } from '@ionic/vue';\n\n  import { textToClipboard } from '../globals/clipboard';\n  import ZeitForm from '../components/ui/ZeitForm.vue';\n  import { AxiosResponse } from 'axios';\n\n  import { formatLongDate } from '../globals/helpers';\n\n  export default defineComponent({\n    components: {\n      IonItem,\n\n      ZeitDetail,\n    },\n    data() {\n      return {\n        formatLongDate,\n        employeeService,\n        employee: undefined as Employee|undefined,\n        isLoaded: false,\n        extraActions: [\n            new DetailAction(\n                'Zugangsdaten kopieren',\n                (employee: Employee) => { textToClipboard(employee.username + \" \" + employee.initial_password) }\n            ),\n            new DetailAction(\n                'Passwort zurücksetzen',\n                (employee: Employee) => {\n                    employeeService.resetPassword(employee.id).then(() => {\n                        const employeeDetail = this.$refs.employeeDetail as typeof ZeitDetail;\n                        const detailForm = employeeDetail.$refs.form as typeof ZeitForm;\n\n                        employeeDetail\n                            .reloadRemoteResource()\n                            .then(() => detailForm.copyRemoteResource());\n                    })\n                }\n            ),\n        ],\n      }\n    },\n    beforeMount() {\n      if (this.$route.params.id) {\n        this.employeeService.retrieve(this.$route.params.id as string)\n          .then((response: AxiosResponse<Employee>) => {\n            this.employee = response.data;\n            if (this.employee.archived_at) this.extraActions = [];\n\n            this.isLoaded = true;\n          });\n      } else {\n        this.isLoaded = true;\n      }\n    },\n  })\n</script>\n","import { Plugins } from '@capacitor/core';\nimport { toastController } from '@ionic/vue';\n\nconst { Clipboard } = Plugins;\n\n\nconst textToClipboard = function(text: string) {\n    Clipboard.write({\n        string: text,\n    });\n    toastController\n        .create({\n            message: 'Kopiert.',\n            duration: 2000\n        })\n        .then(toast => toast.present());\n}\n\n\nexport { textToClipboard }\n","\n  import { defineComponent } from 'vue'\n  import { Employee, employeeService } from '../services/employees';\n  import ZeitDetail, { DetailAction } from '../components/ui/ZeitDetail.vue';\n  import { IonItem } from '@ionic/vue';\n\n  import { textToClipboard } from '../globals/clipboard';\n  import ZeitForm from '../components/ui/ZeitForm.vue';\n  import { AxiosResponse } from 'axios';\n\n  import { formatLongDate } from '../globals/helpers';\n\n  export default defineComponent({\n    components: {\n      IonItem,\n\n      ZeitDetail,\n    },\n    data() {\n      return {\n        formatLongDate,\n        employeeService,\n        employee: undefined as Employee|undefined,\n        isLoaded: false,\n        extraActions: [\n            new DetailAction(\n                'Zugangsdaten kopieren',\n                (employee: Employee) => { textToClipboard(employee.username + \" \" + employee.initial_password) }\n            ),\n            new DetailAction(\n                'Passwort zurücksetzen',\n                (employee: Employee) => {\n                    employeeService.resetPassword(employee.id).then(() => {\n                        const employeeDetail = this.$refs.employeeDetail as typeof ZeitDetail;\n                        const detailForm = employeeDetail.$refs.form as typeof ZeitForm;\n\n                        employeeDetail\n                            .reloadRemoteResource()\n                            .then(() => detailForm.copyRemoteResource());\n                    })\n                }\n            ),\n        ],\n      }\n    },\n    beforeMount() {\n      if (this.$route.params.id) {\n        this.employeeService.retrieve(this.$route.params.id as string)\n          .then((response: AxiosResponse<Employee>) => {\n            this.employee = response.data;\n            if (this.employee.archived_at) this.extraActions = [];\n\n            this.isLoaded = true;\n          });\n      } else {\n        this.isLoaded = true;\n      }\n    },\n  })\n","import { render } from \"./EmployeesDetail.vue?vue&type=template&id=0d6f2a32\"\nimport script from \"./EmployeesDetail.vue?vue&type=script&lang=ts\"\nexport * from \"./EmployeesDetail.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","import {BaseService, FormField} from './_base';\n\n\ninterface EmployeeGroup {\n    id: string;\n    name: string;\n    employee_count: number;\n}\n\n\ninterface EmployeeGroupListParams {\n    page?: number;\n    pagesize?: number;\n    query?: string;\n    ids?: Array<string>;\n}\n\n\nclass EmployeeGroupService extends BaseService<EmployeeGroup> {\n    constructor() {\n        super(\"/api/v2/employees/groups/\");\n        this.formFields = [\n            new FormField(\"name\", \"Abteilungsname\", { autofocus: true, mobileType: 'stacked'}),\n        ];\n\n        this.cacheTimeout = 60 * 60 * 24 * 14;\n    }\n\n    newResourceTitle(resourceId?: string): Promise<string> { return Promise.resolve(\"Abteilung hinzufügen\") }\n    newResourceConfirmation(resourceId?: string): Promise<string> { return Promise.resolve(\"Abteilung hinzugefügt\") }\n    deleteResourceMethod(resourceId?: string): Promise<string> { return Promise.resolve(\"delete\") }\n    deleteResourceTitle(resourceId?: string): Promise<string> { return Promise.resolve(\"Entfernen\") }\n    deleteResourceConfirmation(resourceId?: string): Promise<string> { return Promise.resolve(\"Abteilung entfernt\") }\n\n    listParams(params: EmployeeGroupListParams) {\n        const pagesize = params.pagesize || 50;\n        const page = params.page || 1;\n        const query = params.query || '';\n\n        let url =\n            '?limit=' + String(pagesize) +\n            '&offset=' + String((page - 1) * pagesize) +\n            '&q=' + encodeURIComponent(String(query));\n\n            if (params.ids) url += \"&ids=\" + params.ids.join(\"|\");\n\n        return this._get(url);\n    }\n}\n\nconst employeeGroupService = new EmployeeGroupService();\n\nexport { EmployeeGroup, EmployeeGroupService, employeeGroupService }\n\nexport default employeeGroupService;\n","import { AxiosResponse } from 'axios';\nimport { BaseService, PaginatedResponse } from './_base';\n\n\ninterface PhysicalToken {\n    id: string;\n}\n\ninterface PhysicalTokenListParams {\n    page?: number;\n    pagesize?: number;\n\n    query?: string;\n    ids?: Array<string>;\n\n    fields?: Array<string>;\n}\n\n\nclass PhysicalTokenService extends BaseService<PhysicalToken> {\n    constructor() {\n        super(\"/api/v2/devices/physical-tokens/\");\n        this.cacheTimeout = 60 * 60 * 24 * 14;\n    }\n\n    list(this: PhysicalTokenService, page=1, pagesize=1000, query=''): Promise<AxiosResponse<PaginatedResponse<PhysicalToken>>> {\n        const params =\n            '?limit=' + String(pagesize) +\n            '&offset=' + String((page - 1) * pagesize) +\n            '&q=' + encodeURIComponent(String(query));\n\n        return this._get(params) as unknown as Promise<AxiosResponse<PaginatedResponse<PhysicalToken>>>;\n    }\n\n    listParams(this: PhysicalTokenService, params: PhysicalTokenListParams): Promise<PaginatedResponse<PhysicalToken>> {\n        params = params || {};\n\n        params.pagesize = params.pagesize || 1000;\n        params.page = params.page || 1;\n        params.query = params.query || '';\n        params.fields = params.fields || ['id'];\n        params.ids = params.ids || [];\n\n        const query =\n            '?limit=' + String(params.pagesize) +\n            '&offset=' + String((params.page - 1) * params.pagesize) +\n            '&q=' + encodeURIComponent(String(params.query)) +\n            '&fields=' + params.fields.join(\"|\") +\n            '&ids=' + params.ids.join(\"|\");\n\n        return this._get(query) as unknown as Promise<PaginatedResponse<PhysicalToken>>;\n    }\n\n    listCreate(this: PhysicalTokenService, ids: Array<string>) {\n        return this._post('', {ids, });\n    }\n\n    listDelete(this: PhysicalTokenService, ids: Array<string>) {\n        return this._post('delete/', {ids, });\n    }\n\n    listAvailable(page=1, pagesize=50, query='', additionalCardNumber=''): Promise<PaginatedResponse<PhysicalToken>> {\n        const params =\n            '?limit=' + String(pagesize) +\n            '&offset=' + String((page - 1) * pagesize) +\n            '&type=available' +\n            '&q=' + encodeURIComponent(String(query)) +\n            '&additional=' + String(additionalCardNumber);\n\n        return this._get(params) as unknown as Promise<PaginatedResponse<PhysicalToken>>;\n    }\n}\n\nconst physicalTokenService = new PhysicalTokenService();\n\nexport { physicalTokenService, PhysicalTokenService, PhysicalToken }\n\nexport default physicalTokenService;\n","import { BaseService, FormField, FilterAttribute, PaginatedResponse } from './_base';\n\nimport { employeeGroupService, EmployeeGroup } from './employee-groups';\nimport { physicalTokenService, PhysicalToken } from './physical-tokens';\nimport { institutionService } from './institutions';\n\nimport branding from '../branding';\nimport { AxiosResponse } from 'axios';\n\ninterface Employee {\n    id: string;\n    created_at: string;\n    modified_at: string;\n    archived_at?: string;\n    username: string;\n    user_account_id: string;\n    employee_group_id?: string;\n    external_id?: string;\n    accounting_number?: string;\n    employee_group_name?: string;\n    is_male: boolean;\n    first_name: string;\n    last_name: string;\n    email?: string;\n    initial_password: string;\n    physical_token_id?: string;\n    can_be_deleted: boolean;\n    delete_after_archive_period?: number;\n}\n\ninterface EmployeesListParams {\n    page?: number;\n    pagesize?: number;\n    query?: string;\n    useCache?: boolean;\n\n    verbosity?: string;\n\n    ids?: Array<string>;\n    employeeGroups?: Array<string>;\n    showArchived?: boolean;\n    minimumAbsenceCount?: number;\n    absenceDaterange?: string;\n}\n\n\nclass EmployeeService extends BaseService<Employee> {\n    archivedFormFields: Array<FormField<any>>;\n\n    constructor() {\n        super(\"/api/v2/employees/employees/\");\n        this.formFields = [\n            new FormField<Employee>(\"first_name\", \"Vorname\", {autofocus: true}),\n            new FormField<Employee>(\"last_name\", \"Nachname\"),\n            new FormField<Employee>(\"email\", \"E-Mail-Adresse\", {\n                mobileType: \"stacked\",\n            }),\n            new FormField<EmployeeGroup>(\"employee_group_id\", \"Abteilung\", {\n                type: 'select',\n                remoteSourceService: employeeGroupService,\n                remoteSourceAttribute: \"name\"\n            }),\n            new FormField<PhysicalToken>(\"physical_token_id\", \"Token-Nummer\", {\n                type: 'select',\n                description: \"Die ausgewählte Token-Nummer kann zur Authentifizierung am Zeiterfassungs-Terminal verwendet werden. Nur nicht bereits zugewiesene Nummern werden angezeigt. <a target='_blank' href='/tokens/'>Token verwalten</a>\",\n                remoteSourceService: physicalTokenService,\n                remoteSourceListMethod: \"listAvailable\",\n                remoteSourceAttribute: 'id',\n                listPageSize: 1000,\n            }),\n            new FormField<Employee>(\"accounting_number\", \"Personalnummer\", { mobileType: 'stacked', description: \"Die Personalnummer wird verwendet, um den Mitarbeiter im Buchhaltungsexport zu identifizieren.\"}),\n        ];\n        if (branding.id == \"orange\")\n            this.formFields.push(new FormField<Employee>(\"external_id\", \"aQrate Benutzername\", { mobileType: 'stacked', description:  \"Der Benutzername wird verwendet, um diesen Zeitblick Mitarbeiter einem aQrate Mitarbeiter bei Authentifizierung am MFP zuzuordnen.\"}));\n        this.formFields = this.formFields.concat([\n            new FormField<Employee>(\"username\", branding.name + \" Benutzername\", {\n                mobileType: 'stacked',\n                description: \"Der Benutzername wird vom Mitarbeiter benötigt, um sich gegenüber der \" + branding.name + \" Smartphone App und dem Web-Login (https://\" + branding.url + \"/) zu authentifizieren.\",\n                isReadOnly: true,\n                showCreate: false,\n            }),\n            new FormField<Employee>(\"initial_password\", \"Vorläufiges Passwort\", { mobileType: 'stacked', isReadOnly: true, showCreate: false, }),\n        ]);\n\n        this.archivedFormFields = [\n            new FormField<Employee>(\"first_name\", \"Vorname\", {isReadOnly: true}),\n            new FormField<Employee>(\"last_name\", \"Nachname\", { isReadOnly: true }),\n            new FormField<Employee>(\"email\", \"E-Mail-Adresse\", { isReadOnly: true }),\n            new FormField<EmployeeGroup>(\"employee_group_id\", \"Abteilung\", {\n                type: 'select',\n                remoteSourceService: employeeGroupService,\n                remoteSourceAttribute: \"name\",\n                isReadOnly: true,\n            }),\n            new FormField<Employee>(\"accounting_id\", \"Personalnummer\", { description: \"Die Personalnummer wird verwendet, um den Mitarbeiter im Buchhaltungsexport zu identifizieren.\" , isReadOnly: true}),\n        ];\n        if (branding.id == \"orange\")\n            this.archivedFormFields.push(new FormField<Employee>(\"external_id\", \"aQrate Benutzername\", { description: \"Der Benutzername wird verwendet, um diesen Zeitblick Mitarbeiter einem aQrate Mitarbeiter bei Authentifizierung am MFP zuzuordnen.\", isReadOnly: true }));\n\n        this.filterAttributes = [\n            new FilterAttribute(\"showArchived\", \"Archivierte Mitarbeiter anzeigen\", \"boolean\", false, {\n                visible: this.listParams({ showArchived: true}).then((response: AxiosResponse<PaginatedResponse<EmployeeGroup>>) => {\n                    return response.data.count > 0;\n                }),\n            }),\n            new FilterAttribute(\"employeeGroups\", \"Abteilungen\", \"select\", undefined, {\n                multiple: true,\n                remoteSourceService: employeeGroupService,\n                visible: employeeGroupService.listParams({}).then((response: AxiosResponse<PaginatedResponse<EmployeeGroup>>) => {\n                    return response.data.count > 0;\n                }),\n            }),\n        ];\n\n        this.cacheTimeout = 60 * 60 * 24 * 14;\n    }\n\n    titleAttribute(): Promise<any> { return Promise.resolve((resource: any) => resource.first_name + \" \" + resource.last_name) }\n    newResourceTitle(resourceId?: string): Promise<string> { return Promise.resolve(\"Mitarbeiter hinzufügen\") }\n    newResourceConfirmation(resourceId?: string): Promise<string> { return Promise.resolve(\"Mitarbeiter hinzugefügt\") }\n\n    deleteResourceMethod(resourceId?: string): Promise<string> {\n        if (!resourceId) return Promise.resolve('');\n\n        return this.retrieve(resourceId).then(employeeResponse => {\n            if (employeeResponse.data.can_be_deleted) {\n                return Promise.resolve(\"delete\");\n            } else if (!employeeResponse.data.archived_at) {\n                return Promise.resolve(\"archive\");\n            }\n\n            return Promise.resolve('');\n        });\n    }\n    deleteResourceTitle(resourceId?: string): Promise<string> {\n        if (!resourceId) return Promise.resolve(\"Entfernen\");\n\n        return this.retrieve(resourceId).then(employeeResponse => {\n            if (employeeResponse.data.can_be_deleted) {\n                return Promise.resolve(\"Entfernen\");\n            } else if (!employeeResponse.data.archived_at) {\n                return Promise.resolve(\"Archivieren\");\n            }\n\n            return Promise.resolve('');\n        });\n    }\n    deleteResourceConfirmation(resourceId?: string): Promise<string> {\n        if (!resourceId) return Promise.resolve(\"Mitarbeiter entfernt\");\n\n        return this.retrieve(resourceId).then(employeeResponse => {\n            if (employeeResponse.data.can_be_deleted) {\n                return Promise.resolve(\"Mitarbeiter entfernt\");\n            } else if (!employeeResponse.data.archived_at) {\n                return Promise.resolve(\"Mitarbeiter archiviert\");\n            }\n\n            return Promise.resolve('');\n        });\n    }\n\n    async retrieveSettingValue(resourceId: string, categoryId: string, settingId: string): Promise<any> {\n        const employeeSettings = (await this.retrieveSettings(resourceId)).data;\n        if (categoryId in employeeSettings && settingId in employeeSettings[categoryId]) {\n            return employeeSettings[categoryId][settingId]\n        }\n\n        return institutionService.retrieveSettingValue(categoryId, settingId);\n\n    }\n\n    retrieveSettings(resourceId: string): Promise<AxiosResponse<any>> {\n        return this._get(resourceId + \"/settings/\") as unknown as Promise<AxiosResponse<any>>;\n    }\n\n    updateSettings(resourceId: string, newSettings: any) {\n        return this._post(resourceId + \"/settings/\", newSettings);\n    }\n\n    resetPassword(resourceId: string) {\n        return this._post(resourceId + \"/reset-password/\", {});\n    }\n\n    list(page=1, pagesize=50, query='', employeeGroups?: string, showArchived?: boolean) {\n        let params =\n            '?limit=' + String(pagesize) +\n            '&offset=' + String((page - 1) * pagesize) +\n            '&q=' + encodeURIComponent(String(query));\n\n        if (employeeGroups != undefined) {\n            params = params + '&employee_groups=' + employeeGroups;\n        }\n\n        if (showArchived === true) {\n            params = params + '&archived';\n        }\n\n        return this._get(params);\n    }\n\n    listParams(params: EmployeesListParams) {\n        const pagesize = params.pagesize || 50;\n        const page = params.page || 1;\n        const query = params.query || '';\n\n        let url =\n            '?limit=' + String(pagesize) +\n            '&offset=' + String((page - 1) * pagesize) +\n            '&q=' + encodeURIComponent(String(query));\n\n        if (params.verbosity) url += \"&verbosity=\" + params.verbosity;\n        if (params.ids) url += \"&ids=\" + params.ids.join(\"|\");\n        if (params.employeeGroups) url += \"&employee_groups=\" + params.employeeGroups.join(\"|\");\n        if (params.showArchived === true) url = url + '&archived';\n        if (params.minimumAbsenceCount) url = url + '&absence_count__gte=' + String(params.minimumAbsenceCount);\n        if (params.absenceDaterange) url = url + '&absence_daterange=' + params.absenceDaterange;\n\n        return this._get(url, params.useCache !== false);\n    }\n\n    archive(resourceId: string) {\n        return this._post(resourceId + \"/archive/\", {});\n    }\n}\n\nconst employeeService = new EmployeeService();\n\nexport { EmployeeService, employeeService, Employee };\n\nexport default employeeService;\n"],"sourceRoot":""}