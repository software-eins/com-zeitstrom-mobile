{"version":3,"sources":["webpack:///./src/services/employee-groups.ts","webpack:///./src/services/physical-tokens.ts","webpack:///./src/services/employees.ts","webpack:///./src/views/Debug.vue","webpack:///./src/views/Debug.vue?0fe4","webpack:///./src/views/Debug.vue?8c9a"],"names":["EmployeeGroupService","formFields","autofocus","mobileType","cacheTimeout","resourceId","Promise","resolve","params","pagesize","page","query","url","String","encodeURIComponent","ids","join","this","_get","employeeGroupService","PhysicalTokenService","fields","_post","additionalCardNumber","physicalTokenService","EmployeeService","type","remoteSourceService","remoteSourceAttribute","description","remoteSourceListMethod","listPageSize","id","push","concat","name","isReadOnly","showCreate","archivedFormFields","filterAttributes","visible","listParams","showArchived","then","response","data","count","undefined","multiple","resource","first_name","last_name","retrieve","employeeResponse","can_be_deleted","archived_at","categoryId","settingId","retrieveSettings","employeeSettings","retrieveSettingValue","newSettings","employeeGroups","verbosity","minimumAbsenceCount","absenceDaterange","useCache","employeeService","class","translucent","slot","color","foo","components","IonPage","IonHeader","IonToolbar","IonButtons","IonMenuButton","IonTitle","IonContent","accountService","beforeMount","list","result","employeeId","results","employee_id","render"],"mappings":"wOAkBMA,E,wDACF,iDACI,cAAM,6BACN,EAAKC,WAAa,CACd,IAAI,OAAU,OAAQ,iBAAkB,CAAEC,WAAW,EAAMC,WAAY,aAG3E,EAAKC,aAAe,QANxB,E,gEASiBC,GAAwC,OAAOC,QAAQC,QAAQ,0B,8CACxDF,GAAwC,OAAOC,QAAQC,QAAQ,2B,2CAClEF,GAAwC,OAAOC,QAAQC,QAAQ,Y,0CAChEF,GAAwC,OAAOC,QAAQC,QAAQ,e,iDACxDF,GAAwC,OAAOC,QAAQC,QAAQ,wB,iCAE/EC,GACP,IAAMC,EAAWD,EAAOC,UAAY,GAC9BC,EAAOF,EAAOE,MAAQ,EACtBC,EAAQH,EAAOG,OAAS,GAE1BC,EACA,UAAYC,OAAOJ,GACnB,WAAaI,QAAQH,EAAO,GAAKD,GACjC,MAAQK,mBAAmBD,OAAOF,IAItC,OAFQH,EAAOO,MAAKH,GAAO,QAAUJ,EAAOO,IAAIC,KAAK,MAE9CC,KAAKC,KAAKN,O,GA5BU,QAgC7BO,EAAuB,IAAInB,G,gJC/B3BoB,E,wDACF,iDACI,cAAM,oCACN,EAAKhB,aAAe,QAFxB,E,sDAKgE,IAA/BM,EAA+B,uDAA1B,EAAGD,EAAuB,uDAAd,IAAME,EAAQ,uDAAF,GACpDH,EACF,UAAYK,OAAOJ,GACnB,WAAaI,QAAQH,EAAO,GAAKD,GACjC,MAAQK,mBAAmBD,OAAOF,IAEtC,OAAOM,KAAKC,KAAKV,K,iCAGkBA,GACnCA,EAASA,GAAU,GAEnBA,EAAOC,SAAWD,EAAOC,UAAY,IACrCD,EAAOE,KAAOF,EAAOE,MAAQ,EAC7BF,EAAOG,MAAQH,EAAOG,OAAS,GAC/BH,EAAOa,OAASb,EAAOa,QAAU,CAAC,MAClCb,EAAOO,IAAMP,EAAOO,KAAO,GAE3B,IAAMJ,EACF,UAAYE,OAAOL,EAAOC,UAC1B,WAAaI,QAAQL,EAAOE,KAAO,GAAKF,EAAOC,UAC/C,MAAQK,mBAAmBD,OAAOL,EAAOG,QACzC,WAAaH,EAAOa,OAAOL,KAAK,KAChC,QAAUR,EAAOO,IAAIC,KAAK,KAE9B,OAAOC,KAAKC,KAAKP,K,iCAGkBI,GACnC,OAAOE,KAAKK,MAAM,GAAI,CAACP,U,iCAGYA,GACnC,OAAOE,KAAKK,MAAM,UAAW,CAACP,U,sCAGkC,IAAtDL,EAAsD,uDAAjD,EAAGD,EAA8C,uDAArC,GAAIE,EAAiC,uDAA3B,GAAIY,EAAuB,uDAAF,GACxDf,EACF,UAAYK,OAAOJ,GACnB,WAAaI,QAAQH,EAAO,GAAKD,GADjC,qBAGQK,mBAAmBD,OAAOF,IAClC,eAAiBE,OAAOU,GAE5B,OAAON,KAAKC,KAAKV,O,GAlDU,QAsD7BgB,EAAuB,IAAIJ,EAIlB,U,kPC/BTK,E,wDAGF,iDACI,cAAM,gCACN,EAAKxB,WAAa,CACd,IAAI,OAAoB,aAAc,UAAW,CAACC,WAAW,IAC7D,IAAI,OAAoB,YAAa,YACrC,IAAI,OAAoB,QAAS,iBAAkB,CAC/CC,WAAY,YAEhB,IAAI,OAAyB,oBAAqB,YAAa,CAC3DuB,KAAM,SACNC,oBAAqB,OACrBC,sBAAuB,SAE3B,IAAI,OAAyB,oBAAqB,eAAgB,CAC9DF,KAAM,SACNG,YAAa,sNACbF,oBAAqB,OACrBG,uBAAwB,gBACxBF,sBAAuB,KACvBG,aAAc,MAElB,IAAI,OAAoB,oBAAqB,iBAAkB,CAAE5B,WAAY,UAAW0B,YAAa,oGAEtF,UAAf,OAASG,IACT,EAAK/B,WAAWgC,KAAK,IAAI,OAAoB,cAAe,sBAAuB,CAAE9B,WAAY,UAAW0B,YAAc,wIAC9H,EAAK5B,WAAa,EAAKA,WAAWiC,OAAO,CACrC,IAAI,OAAoB,WAAY,OAASC,KAAO,gBAAiB,CACjEhC,WAAY,UACZ0B,YAAa,yEAA2E,OAASM,KAAO,8CAAgD,OAASvB,IAAM,0BACvKwB,YAAY,EACZC,YAAY,IAEhB,IAAI,OAAoB,mBAAoB,uBAAwB,CAAElC,WAAY,UAAWiC,YAAY,EAAMC,YAAY,MAG/H,EAAKC,mBAAqB,CACtB,IAAI,OAAoB,aAAc,UAAW,CAACF,YAAY,IAC9D,IAAI,OAAoB,YAAa,WAAY,CAAEA,YAAY,IAC/D,IAAI,OAAoB,QAAS,iBAAkB,CAAEA,YAAY,IACjE,IAAI,OAAyB,oBAAqB,YAAa,CAC3DV,KAAM,SACNC,oBAAqB,OACrBC,sBAAuB,OACvBQ,YAAY,IAEhB,IAAI,OAAoB,gBAAiB,iBAAkB,CAAEP,YAAa,iGAAmGO,YAAY,KAE1K,UAAf,OAASJ,IACT,EAAKM,mBAAmBL,KAAK,IAAI,OAAoB,cAAe,sBAAuB,CAAEJ,YAAa,qIAAsIO,YAAY,KAEhQ,EAAKG,iBAAmB,CACpB,IAAI,OAAgB,eAAgB,mCAAoC,WAAW,EAAO,CACtFC,QAAS,EAAKC,WAAW,CAAEC,cAAc,IAAOC,MAAK,SAACC,GAClD,OAAOA,EAASC,KAAKC,MAAQ,OAGrC,IAAI,OAAgB,iBAAkB,cAAe,cAAUC,EAAW,CACtEC,UAAU,EACVrB,oBAAqB,OACrBa,QAAS,OAAqBC,WAAW,IAAIE,MAAK,SAACC,GAC/C,OAAOA,EAASC,KAAKC,MAAQ,QAKzC,EAAK1C,aAAe,QAjExB,E,gEAoEiC,OAAOE,QAAQC,SAAQ,SAAC0C,GAAD,OAAmBA,EAASC,WAAa,IAAMD,EAASE,e,uCAC/F9C,GAAwC,OAAOC,QAAQC,QAAQ,4B,8CACxDF,GAAwC,OAAOC,QAAQC,QAAQ,6B,2CAElEF,GACjB,OAAKA,EAEEY,KAAKmC,SAAS/C,GAAYsC,MAAK,SAAAU,GAClC,OAAIA,EAAiBR,KAAKS,eACfhD,QAAQC,QAAQ,UACf8C,EAAiBR,KAAKU,YAI3BjD,QAAQC,QAAQ,IAHZD,QAAQC,QAAQ,cANPD,QAAQC,QAAQ,M,0CAYxBF,GAChB,OAAKA,EAEEY,KAAKmC,SAAS/C,GAAYsC,MAAK,SAAAU,GAClC,OAAIA,EAAiBR,KAAKS,eACfhD,QAAQC,QAAQ,aACf8C,EAAiBR,KAAKU,YAI3BjD,QAAQC,QAAQ,IAHZD,QAAQC,QAAQ,kBANPD,QAAQC,QAAQ,e,iDAYjBF,GACvB,OAAKA,EAEEY,KAAKmC,SAAS/C,GAAYsC,MAAK,SAAAU,GAClC,OAAIA,EAAiBR,KAAKS,eACfhD,QAAQC,QAAQ,wBACf8C,EAAiBR,KAAKU,YAI3BjD,QAAQC,QAAQ,IAHZD,QAAQC,QAAQ,6BANPD,QAAQC,QAAQ,0B,sGAajBF,EAAoBmD,EAAoBC,G,uGAC/BxC,KAAKyC,iBAAiBrD,G,UAAhDsD,E,OAA6Dd,OAC/DW,KAAcG,MAAoBF,KAAaE,EAAiBH,I,yCACzDG,EAAiBH,GAAYC,I,gCAGjC,OAAmBG,qBAAqBJ,EAAYC,I,qJAI9CpD,GACb,OAAOY,KAAKC,KAAKb,EAAa,gB,qCAGnBA,EAAoBwD,GAC/B,OAAO5C,KAAKK,MAAMjB,EAAa,aAAcwD,K,oCAGnCxD,GACV,OAAOY,KAAKK,MAAMjB,EAAa,mBAAoB,M,6BAG4B,IAA9EK,EAA8E,uDAAzE,EAAGD,EAAsE,uDAA7D,GAAIE,EAAyD,uDAAnD,GAAImD,EAA+C,uCAAtBpB,EAAsB,uCAC3ElC,EACA,UAAYK,OAAOJ,GACnB,WAAaI,QAAQH,EAAO,GAAKD,GACjC,MAAQK,mBAAmBD,OAAOF,IAUtC,YARsBoC,GAAlBe,IACAtD,EAASA,EAAS,oBAAsBsD,IAGvB,IAAjBpB,IACAlC,GAAkB,aAGfS,KAAKC,KAAKV,K,iCAGVA,GACP,IAAMC,EAAWD,EAAOC,UAAY,GAC9BC,EAAOF,EAAOE,MAAQ,EACtBC,EAAQH,EAAOG,OAAS,GAE1BC,EACA,UAAYC,OAAOJ,GACnB,WAAaI,QAAQH,EAAO,GAAKD,GACjC,MAAQK,mBAAmBD,OAAOF,IAStC,OAPIH,EAAOuD,YAAWnD,GAAO,cAAgBJ,EAAOuD,WAChDvD,EAAOO,MAAKH,GAAO,QAAUJ,EAAOO,IAAIC,KAAK,MAC7CR,EAAOsD,iBAAgBlD,GAAO,oBAAsBJ,EAAOsD,eAAe9C,KAAK,OACvD,IAAxBR,EAAOkC,eAAuB9B,GAAY,aAC1CJ,EAAOwD,sBAAqBpD,EAAMA,EAAM,uBAAyBC,OAAOL,EAAOwD,sBAC/ExD,EAAOyD,mBAAkBrD,EAAMA,EAAM,sBAAwBJ,EAAOyD,kBAEjEhD,KAAKC,KAAKN,GAAyB,IAApBJ,EAAO0D,Y,8BAGzB7D,GACJ,OAAOY,KAAKK,MAAMjB,EAAa,YAAa,Q,GA/KtB,QAmLxB8D,EAAkB,IAAI1C,EAIb,U,0EC9NI,S,GAIR2C,MAAM,qB,kRAVf,eAYW,Q,wBAXT,iBAOa,CAPb,eAOa,GAPAC,aAAa,GAAI,C,wBAC5B,iBAKc,CALd,eAKc,Q,wBAJZ,iBAEc,CAFd,eAEc,GAFDC,KAAK,SAAO,C,wBACvB,iBAAmD,CAAnD,eAAmD,GAAlCC,MAAM,gB,MAEzB,eAA4B,Q,wBAAjB,iBAAK,C,gCAGpB,eAEc,Q,wBADZ,iBAA8C,CAA9C,eAA8C,MAA9C,EAA8C,eAAZ,EAAAC,KAAG,O,wDCFxB,iBAAgB,CAC3BC,WAAY,CACVC,QAAA,OAASC,UAAA,OAAWC,WAAA,OAAYC,WAAA,OAAYC,cAAA,OAAeC,SAAA,OAAUC,WAAA,QAEvEnC,KAJ2B,WAKzB,MAAO,CACLoC,eAAA,OACAd,gBAAA,OAEAK,IAAK,QAGTU,YAZ2B,WAYhB,WACTjE,KAAKgE,eAAeE,OAAOxC,MAAK,SAAAyC,GAE5B,IAAMC,EAAaD,EAAOvC,KAAKyC,QAAQ,GAAGC,YAC1C,EAAKpB,gBAAgBP,qBAAqByB,EAAY,sBAAuB,qBAAqB1C,MAAK,SAAAC,GACnG,EAAK4B,IAAM5B,WCvB7B,EAAO4C,OAASA,EAED","file":"js/chunk-04b6a6be.3c916e1c.js","sourcesContent":["import {BaseService, FormField} from './_base';\n\n\ninterface EmployeeGroup {\n    id: string;\n    name: string;\n    employee_count: number;\n}\n\n\ninterface EmployeeGroupListParams {\n    page?: number;\n    pagesize?: number;\n    query?: string;\n    ids?: Array<string>;\n}\n\n\nclass EmployeeGroupService extends BaseService<EmployeeGroup> {\n    constructor() {\n        super(\"/api/v2/employees/groups/\");\n        this.formFields = [\n            new FormField(\"name\", \"Abteilungsname\", { autofocus: true, mobileType: 'stacked'}),\n        ];\n\n        this.cacheTimeout = 60 * 60 * 24 * 14;\n    }\n\n    newResourceTitle(resourceId?: string): Promise<string> { return Promise.resolve(\"Abteilung hinzufügen\") }\n    newResourceConfirmation(resourceId?: string): Promise<string> { return Promise.resolve(\"Abteilung hinzugefügt\") }\n    deleteResourceMethod(resourceId?: string): Promise<string> { return Promise.resolve(\"delete\") }\n    deleteResourceTitle(resourceId?: string): Promise<string> { return Promise.resolve(\"Entfernen\") }\n    deleteResourceConfirmation(resourceId?: string): Promise<string> { return Promise.resolve(\"Abteilung entfernt\") }\n\n    listParams(params: EmployeeGroupListParams) {\n        const pagesize = params.pagesize || 50;\n        const page = params.page || 1;\n        const query = params.query || '';\n\n        let url =\n            '?limit=' + String(pagesize) +\n            '&offset=' + String((page - 1) * pagesize) +\n            '&q=' + encodeURIComponent(String(query));\n\n            if (params.ids) url += \"&ids=\" + params.ids.join(\"|\");\n\n        return this._get(url);\n    }\n}\n\nconst employeeGroupService = new EmployeeGroupService();\n\nexport { EmployeeGroup, EmployeeGroupService, employeeGroupService }\n\nexport default employeeGroupService;\n","import { AxiosResponse } from 'axios';\nimport { BaseService, PaginatedResponse } from './_base';\n\n\ninterface PhysicalToken {\n    id: string;\n}\n\ninterface PhysicalTokenListParams {\n    page?: number;\n    pagesize?: number;\n\n    query?: string;\n    ids?: Array<string>;\n\n    fields?: Array<string>;\n}\n\n\nclass PhysicalTokenService extends BaseService<PhysicalToken> {\n    constructor() {\n        super(\"/api/v2/devices/physical-tokens/\");\n        this.cacheTimeout = 60 * 60 * 24 * 14;\n    }\n\n    list(this: PhysicalTokenService, page=1, pagesize=1000, query=''): Promise<AxiosResponse<PaginatedResponse<PhysicalToken>>> {\n        const params =\n            '?limit=' + String(pagesize) +\n            '&offset=' + String((page - 1) * pagesize) +\n            '&q=' + encodeURIComponent(String(query));\n\n        return this._get(params) as unknown as Promise<AxiosResponse<PaginatedResponse<PhysicalToken>>>;\n    }\n\n    listParams(this: PhysicalTokenService, params: PhysicalTokenListParams): Promise<PaginatedResponse<PhysicalToken>> {\n        params = params || {};\n\n        params.pagesize = params.pagesize || 1000;\n        params.page = params.page || 1;\n        params.query = params.query || '';\n        params.fields = params.fields || ['id'];\n        params.ids = params.ids || [];\n\n        const query =\n            '?limit=' + String(params.pagesize) +\n            '&offset=' + String((params.page - 1) * params.pagesize) +\n            '&q=' + encodeURIComponent(String(params.query)) +\n            '&fields=' + params.fields.join(\"|\") +\n            '&ids=' + params.ids.join(\"|\");\n\n        return this._get(query) as unknown as Promise<PaginatedResponse<PhysicalToken>>;\n    }\n\n    listCreate(this: PhysicalTokenService, ids: Array<string>) {\n        return this._post('', {ids, });\n    }\n\n    listDelete(this: PhysicalTokenService, ids: Array<string>) {\n        return this._post('delete/', {ids, });\n    }\n\n    listAvailable(page=1, pagesize=50, query='', additionalCardNumber=''): Promise<PaginatedResponse<PhysicalToken>> {\n        const params =\n            '?limit=' + String(pagesize) +\n            '&offset=' + String((page - 1) * pagesize) +\n            '&type=available' +\n            '&q=' + encodeURIComponent(String(query)) +\n            '&additional=' + String(additionalCardNumber);\n\n        return this._get(params) as unknown as Promise<PaginatedResponse<PhysicalToken>>;\n    }\n}\n\nconst physicalTokenService = new PhysicalTokenService();\n\nexport { physicalTokenService, PhysicalTokenService, PhysicalToken }\n\nexport default physicalTokenService;\n","import { BaseService, FormField, FilterAttribute, PaginatedResponse } from './_base';\n\nimport { employeeGroupService, EmployeeGroup } from './employee-groups';\nimport { physicalTokenService, PhysicalToken } from './physical-tokens';\nimport { institutionService } from './institutions';\n\nimport branding from '../branding';\nimport { AxiosResponse } from 'axios';\n\ninterface Employee {\n    id: string;\n    created_at: string;\n    modified_at: string;\n    archived_at?: string;\n    username: string;\n    user_account_id: string;\n    employee_group_id?: string;\n    external_id?: string;\n    accounting_number?: string;\n    employee_group_name?: string;\n    is_male: boolean;\n    first_name: string;\n    last_name: string;\n    email?: string;\n    initial_password: string;\n    physical_token_id?: string;\n    can_be_deleted: boolean;\n    delete_after_archive_period?: number;\n}\n\ninterface EmployeesListParams {\n    page?: number;\n    pagesize?: number;\n    query?: string;\n    useCache?: boolean;\n\n    verbosity?: string;\n\n    ids?: Array<string>;\n    employeeGroups?: Array<string>;\n    showArchived?: boolean;\n    minimumAbsenceCount?: number;\n    absenceDaterange?: string;\n}\n\n\nclass EmployeeService extends BaseService<Employee> {\n    archivedFormFields: Array<FormField<any>>;\n\n    constructor() {\n        super(\"/api/v2/employees/employees/\");\n        this.formFields = [\n            new FormField<Employee>(\"first_name\", \"Vorname\", {autofocus: true}),\n            new FormField<Employee>(\"last_name\", \"Nachname\"),\n            new FormField<Employee>(\"email\", \"E-Mail-Adresse\", {\n                mobileType: \"stacked\",\n            }),\n            new FormField<EmployeeGroup>(\"employee_group_id\", \"Abteilung\", {\n                type: 'select',\n                remoteSourceService: employeeGroupService,\n                remoteSourceAttribute: \"name\"\n            }),\n            new FormField<PhysicalToken>(\"physical_token_id\", \"Token-Nummer\", {\n                type: 'select',\n                description: \"Die ausgewählte Token-Nummer kann zur Authentifizierung am Zeiterfassungs-Terminal verwendet werden. Nur nicht bereits zugewiesene Nummern werden angezeigt. <a target='_blank' href='/tokens/'>Token verwalten</a>\",\n                remoteSourceService: physicalTokenService,\n                remoteSourceListMethod: \"listAvailable\",\n                remoteSourceAttribute: 'id',\n                listPageSize: 1000,\n            }),\n            new FormField<Employee>(\"accounting_number\", \"Personalnummer\", { mobileType: 'stacked', description: \"Die Personalnummer wird verwendet, um den Mitarbeiter im Buchhaltungsexport zu identifizieren.\"}),\n        ];\n        if (branding.id == \"orange\")\n            this.formFields.push(new FormField<Employee>(\"external_id\", \"aQrate Benutzername\", { mobileType: 'stacked', description:  \"Der Benutzername wird verwendet, um diesen Zeitblick Mitarbeiter einem aQrate Mitarbeiter bei Authentifizierung am MFP zuzuordnen.\"}));\n        this.formFields = this.formFields.concat([\n            new FormField<Employee>(\"username\", branding.name + \" Benutzername\", {\n                mobileType: 'stacked',\n                description: \"Der Benutzername wird vom Mitarbeiter benötigt, um sich gegenüber der \" + branding.name + \" Smartphone App und dem Web-Login (https://\" + branding.url + \"/) zu authentifizieren.\",\n                isReadOnly: true,\n                showCreate: false,\n            }),\n            new FormField<Employee>(\"initial_password\", \"Vorläufiges Passwort\", { mobileType: 'stacked', isReadOnly: true, showCreate: false, }),\n        ]);\n\n        this.archivedFormFields = [\n            new FormField<Employee>(\"first_name\", \"Vorname\", {isReadOnly: true}),\n            new FormField<Employee>(\"last_name\", \"Nachname\", { isReadOnly: true }),\n            new FormField<Employee>(\"email\", \"E-Mail-Adresse\", { isReadOnly: true }),\n            new FormField<EmployeeGroup>(\"employee_group_id\", \"Abteilung\", {\n                type: 'select',\n                remoteSourceService: employeeGroupService,\n                remoteSourceAttribute: \"name\",\n                isReadOnly: true,\n            }),\n            new FormField<Employee>(\"accounting_id\", \"Personalnummer\", { description: \"Die Personalnummer wird verwendet, um den Mitarbeiter im Buchhaltungsexport zu identifizieren.\" , isReadOnly: true}),\n        ];\n        if (branding.id == \"orange\")\n            this.archivedFormFields.push(new FormField<Employee>(\"external_id\", \"aQrate Benutzername\", { description: \"Der Benutzername wird verwendet, um diesen Zeitblick Mitarbeiter einem aQrate Mitarbeiter bei Authentifizierung am MFP zuzuordnen.\", isReadOnly: true }));\n\n        this.filterAttributes = [\n            new FilterAttribute(\"showArchived\", \"Archivierte Mitarbeiter anzeigen\", \"boolean\", false, {\n                visible: this.listParams({ showArchived: true}).then((response: AxiosResponse<PaginatedResponse<EmployeeGroup>>) => {\n                    return response.data.count > 0;\n                }),\n            }),\n            new FilterAttribute(\"employeeGroups\", \"Abteilungen\", \"select\", undefined, {\n                multiple: true,\n                remoteSourceService: employeeGroupService,\n                visible: employeeGroupService.listParams({}).then((response: AxiosResponse<PaginatedResponse<EmployeeGroup>>) => {\n                    return response.data.count > 0;\n                }),\n            }),\n        ];\n\n        this.cacheTimeout = 60 * 60 * 24 * 14;\n    }\n\n    titleAttribute(): Promise<any> { return Promise.resolve((resource: any) => resource.first_name + \" \" + resource.last_name) }\n    newResourceTitle(resourceId?: string): Promise<string> { return Promise.resolve(\"Mitarbeiter hinzufügen\") }\n    newResourceConfirmation(resourceId?: string): Promise<string> { return Promise.resolve(\"Mitarbeiter hinzugefügt\") }\n\n    deleteResourceMethod(resourceId?: string): Promise<string> {\n        if (!resourceId) return Promise.resolve('');\n\n        return this.retrieve(resourceId).then(employeeResponse => {\n            if (employeeResponse.data.can_be_deleted) {\n                return Promise.resolve(\"delete\");\n            } else if (!employeeResponse.data.archived_at) {\n                return Promise.resolve(\"archive\");\n            }\n\n            return Promise.resolve('');\n        });\n    }\n    deleteResourceTitle(resourceId?: string): Promise<string> {\n        if (!resourceId) return Promise.resolve(\"Entfernen\");\n\n        return this.retrieve(resourceId).then(employeeResponse => {\n            if (employeeResponse.data.can_be_deleted) {\n                return Promise.resolve(\"Entfernen\");\n            } else if (!employeeResponse.data.archived_at) {\n                return Promise.resolve(\"Archivieren\");\n            }\n\n            return Promise.resolve('');\n        });\n    }\n    deleteResourceConfirmation(resourceId?: string): Promise<string> {\n        if (!resourceId) return Promise.resolve(\"Mitarbeiter entfernt\");\n\n        return this.retrieve(resourceId).then(employeeResponse => {\n            if (employeeResponse.data.can_be_deleted) {\n                return Promise.resolve(\"Mitarbeiter entfernt\");\n            } else if (!employeeResponse.data.archived_at) {\n                return Promise.resolve(\"Mitarbeiter archiviert\");\n            }\n\n            return Promise.resolve('');\n        });\n    }\n\n    async retrieveSettingValue(resourceId: string, categoryId: string, settingId: string): Promise<any> {\n        const employeeSettings = (await this.retrieveSettings(resourceId)).data;\n        if (categoryId in employeeSettings && settingId in employeeSettings[categoryId]) {\n            return employeeSettings[categoryId][settingId]\n        }\n\n        return institutionService.retrieveSettingValue(categoryId, settingId);\n\n    }\n\n    retrieveSettings(resourceId: string): Promise<AxiosResponse<any>> {\n        return this._get(resourceId + \"/settings/\") as unknown as Promise<AxiosResponse<any>>;\n    }\n\n    updateSettings(resourceId: string, newSettings: any) {\n        return this._post(resourceId + \"/settings/\", newSettings);\n    }\n\n    resetPassword(resourceId: string) {\n        return this._post(resourceId + \"/reset-password/\", {});\n    }\n\n    list(page=1, pagesize=50, query='', employeeGroups?: string, showArchived?: boolean) {\n        let params =\n            '?limit=' + String(pagesize) +\n            '&offset=' + String((page - 1) * pagesize) +\n            '&q=' + encodeURIComponent(String(query));\n\n        if (employeeGroups != undefined) {\n            params = params + '&employee_groups=' + employeeGroups;\n        }\n\n        if (showArchived === true) {\n            params = params + '&archived';\n        }\n\n        return this._get(params);\n    }\n\n    listParams(params: EmployeesListParams) {\n        const pagesize = params.pagesize || 50;\n        const page = params.page || 1;\n        const query = params.query || '';\n\n        let url =\n            '?limit=' + String(pagesize) +\n            '&offset=' + String((page - 1) * pagesize) +\n            '&q=' + encodeURIComponent(String(query));\n\n        if (params.verbosity) url += \"&verbosity=\" + params.verbosity;\n        if (params.ids) url += \"&ids=\" + params.ids.join(\"|\");\n        if (params.employeeGroups) url += \"&employee_groups=\" + params.employeeGroups.join(\"|\");\n        if (params.showArchived === true) url = url + '&archived';\n        if (params.minimumAbsenceCount) url = url + '&absence_count__gte=' + String(params.minimumAbsenceCount);\n        if (params.absenceDaterange) url = url + '&absence_daterange=' + params.absenceDaterange;\n\n        return this._get(url, params.useCache !== false);\n    }\n\n    archive(resourceId: string) {\n        return this._post(resourceId + \"/archive/\", {});\n    }\n}\n\nconst employeeService = new EmployeeService();\n\nexport { EmployeeService, employeeService, Employee };\n\nexport default employeeService;\n","<template>\n  <ion-page>\n    <ion-header :translucent=\"true\">\n      <ion-toolbar>\n        <ion-buttons slot=\"start\">\n          <ion-menu-button color=\"primary\"></ion-menu-button>\n        </ion-buttons>\n        <ion-title>Debug</ion-title>\n      </ion-toolbar>\n    </ion-header>\n    <ion-content>\n      <pre class=\"py-4 px-4 text-xs\">{{ foo }}</pre>\n    </ion-content>\n  </ion-page>\n</template>\n\n<script lang=\"ts\">\n    import { defineComponent } from 'vue';\n    import { accountService, Account } from '../services/accounts';\n    import { employeeService, Employee } from '../services/employees';\n\n    import {\n        IonPage, IonHeader, IonToolbar, IonButtons, IonMenuButton, IonTitle, IonContent,\n    } from '@ionic/vue';\n\n    export default defineComponent({\n        components: {\n          IonPage, IonHeader, IonToolbar, IonButtons, IonMenuButton, IonTitle, IonContent,\n        },\n        data() {\n          return {\n            accountService,\n            employeeService,\n\n            foo: 'bar' as any,\n          }\n        },\n        beforeMount() {\n          this.accountService.list().then(result => {\n\n              const employeeId = result.data.results[0].employee_id as string;\n              this.employeeService.retrieveSettingValue(employeeId, 'employee_app_access', 'location_tracking').then(response => {\n                  this.foo = response;\n              })\n          });\n        },\n    })\n</script>\n","\n    import { defineComponent } from 'vue';\n    import { accountService, Account } from '../services/accounts';\n    import { employeeService, Employee } from '../services/employees';\n\n    import {\n        IonPage, IonHeader, IonToolbar, IonButtons, IonMenuButton, IonTitle, IonContent,\n    } from '@ionic/vue';\n\n    export default defineComponent({\n        components: {\n          IonPage, IonHeader, IonToolbar, IonButtons, IonMenuButton, IonTitle, IonContent,\n        },\n        data() {\n          return {\n            accountService,\n            employeeService,\n\n            foo: 'bar' as any,\n          }\n        },\n        beforeMount() {\n          this.accountService.list().then(result => {\n\n              const employeeId = result.data.results[0].employee_id as string;\n              this.employeeService.retrieveSettingValue(employeeId, 'employee_app_access', 'location_tracking').then(response => {\n                  this.foo = response;\n              })\n          });\n        },\n    })\n","import { render } from \"./Debug.vue?vue&type=template&id=707bbab9\"\nimport script from \"./Debug.vue?vue&type=script&lang=ts\"\nexport * from \"./Debug.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script"],"sourceRoot":""}