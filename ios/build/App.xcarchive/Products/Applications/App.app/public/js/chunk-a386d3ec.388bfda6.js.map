{"version":3,"sources":["webpack:///./src/views/DepartmentsEmployees.vue","webpack:///./src/views/DepartmentsEmployees.vue?882c","webpack:///./src/views/DepartmentsEmployees.vue?e639","webpack:///./src/services/employee-groups.ts","webpack:///./src/services/physical-tokens.ts","webpack:///./src/services/employees.ts","webpack:///./src/branding.ts"],"names":["resourceType","basePath","searchPlaceholder","service","employeeService","fields","listParameters","components","ZeitList","computed","employeeGroups","this","$route","params","id","data","label","hideDesktop","mobileLevel","formatter","e","first_name","last_name","default","render","EmployeeGroupService","formFields","autofocus","mobileType","cacheTimeout","resourceId","Promise","resolve","pagesize","page","query","url","String","encodeURIComponent","ids","join","_get","employeeGroupService","PhysicalTokenService","_post","additionalCardNumber","physicalTokenService","EmployeeService","type","remoteSourceService","remoteSourceAttribute","description","remoteSourceListMethod","listPageSize","push","concat","name","isReadOnly","showCreate","archivedFormFields","filterAttributes","visible","listParams","showArchived","then","response","count","undefined","multiple","resource","retrieve","employeeResponse","can_be_deleted","archived_at","categoryId","settingId","retrieveSettings","employeeSettings","retrieveSettingValue","newSettings","verbosity","minimumAbsenceCount","absenceDaterange","useCache","branding","VUE_APP_BRANDING","brands","Map","set","colors","primary","success","danger","warning","dark","isMobile","VUE_APP_IS_MOBILE","supportPhone","supportPhoneFootnote","get"],"mappings":"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","file":"js/chunk-a386d3ec.388bfda6.js","sourcesContent":["<template>\n    <zeit-list\n        resourceType=\"Mitarbeiter\"\n        basePath=\"/employees/\"\n        searchPlaceholder=\"Suche nach Name oder Token\"\n        :service=\"employeeService\"\n        :fields=\"fields\"\n        :listParameters=\"listParameters\"\n    ></zeit-list>\n</template>\n\n<script lang=\"ts\">\n    import { defineComponent } from 'vue';\n    import { star } from 'ionicons/icons';\n    import ZeitList from '../components/ui/ZeitList.vue';\n    import employeeService from '../services/employees';\n\n    export default defineComponent({\n        components: {\n            ZeitList,\n        },\n        computed: {\n            listParameters() {\n                return {employeeGroups: [this.$route.params.id]}\n            }\n        },\n        data() {\n            return {\n                employeeService,\n                fields: [\n                    {\n                        id: \"first_name\",\n                        label: \"Vorname\",\n                    },\n                    {\n                        id: \"last_name\",\n                        label: \"Nachname\",\n                    },\n                    {\n                        hideDesktop: true,\n                        mobileLevel: 'h2',\n                        formatter: (e: any) => {\n                            if (e.first_name && e.last_name) return e.first_name + \" \" + e.last_name;\n                            return e.first_name || e.last_name;\n                        },\n                    },\n                    {\n                        id: 'physical_token_id',\n                        label: 'Token',\n                        mobileLevel: 'p',\n                        default: 'Kein Token',\n                    }\n                ],\n            }\n        },\n    })\n</script>\n\n\n","\n    import { defineComponent } from 'vue';\n    import { star } from 'ionicons/icons';\n    import ZeitList from '../components/ui/ZeitList.vue';\n    import employeeService from '../services/employees';\n\n    export default defineComponent({\n        components: {\n            ZeitList,\n        },\n        computed: {\n            listParameters() {\n                return {employeeGroups: [this.$route.params.id]}\n            }\n        },\n        data() {\n            return {\n                employeeService,\n                fields: [\n                    {\n                        id: \"first_name\",\n                        label: \"Vorname\",\n                    },\n                    {\n                        id: \"last_name\",\n                        label: \"Nachname\",\n                    },\n                    {\n                        hideDesktop: true,\n                        mobileLevel: 'h2',\n                        formatter: (e: any) => {\n                            if (e.first_name && e.last_name) return e.first_name + \" \" + e.last_name;\n                            return e.first_name || e.last_name;\n                        },\n                    },\n                    {\n                        id: 'physical_token_id',\n                        label: 'Token',\n                        mobileLevel: 'p',\n                        default: 'Kein Token',\n                    }\n                ],\n            }\n        },\n    })\n","import { render } from \"./DepartmentsEmployees.vue?vue&type=template&id=3c9539c6\"\nimport script from \"./DepartmentsEmployees.vue?vue&type=script&lang=ts\"\nexport * from \"./DepartmentsEmployees.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","import {BaseService, FormField} from './_base';\n\n\ninterface EmployeeGroup {\n    id: string;\n    name: string;\n    employee_count: number;\n}\n\n\ninterface EmployeeGroupListParams {\n    page?: number;\n    pagesize?: number;\n    query?: string;\n    ids?: Array<string>;\n}\n\n\nclass EmployeeGroupService extends BaseService<EmployeeGroup> {\n    constructor() {\n        super(\"/api/v2/employees/groups/\");\n        this.formFields = [\n            new FormField(\"name\", \"Abteilungsname\", { autofocus: true, mobileType: 'stacked'}),\n        ];\n\n        this.cacheTimeout = 60 * 60 * 24 * 14;\n    }\n\n    newResourceTitle(resourceId?: string): Promise<string> { return Promise.resolve(\"Abteilung hinzufügen\") }\n    newResourceConfirmation(resourceId?: string): Promise<string> { return Promise.resolve(\"Abteilung hinzugefügt\") }\n    deleteResourceMethod(resourceId?: string): Promise<string> { return Promise.resolve(\"delete\") }\n    deleteResourceTitle(resourceId?: string): Promise<string> { return Promise.resolve(\"Entfernen\") }\n    deleteResourceConfirmation(resourceId?: string): Promise<string> { return Promise.resolve(\"Abteilung entfernt\") }\n\n    listParams(params: EmployeeGroupListParams) {\n        const pagesize = params.pagesize || 50;\n        const page = params.page || 1;\n        const query = params.query || '';\n\n        let url =\n            '?limit=' + String(pagesize) +\n            '&offset=' + String((page - 1) * pagesize) +\n            '&q=' + encodeURIComponent(String(query));\n\n            if (params.ids) url += \"&ids=\" + params.ids.join(\"|\");\n\n        return this._get(url);\n    }\n}\n\nconst employeeGroupService = new EmployeeGroupService();\n\nexport { EmployeeGroup, EmployeeGroupService, employeeGroupService }\n\nexport default employeeGroupService;\n","import { AxiosResponse } from 'axios';\nimport { BaseService, PaginatedResponse } from './_base';\n\n\ninterface PhysicalToken {\n    id: string;\n}\n\ninterface PhysicalTokenListParams {\n    page?: number;\n    pagesize?: number;\n\n    query?: string;\n    ids?: Array<string>;\n\n    fields?: Array<string>;\n}\n\n\nclass PhysicalTokenService extends BaseService<PhysicalToken> {\n    constructor() {\n        super(\"/api/v2/devices/physical-tokens/\");\n        this.cacheTimeout = 60 * 60 * 24 * 14;\n    }\n\n    list(this: PhysicalTokenService, page=1, pagesize=1000, query=''): Promise<AxiosResponse<PaginatedResponse<PhysicalToken>>> {\n        const params =\n            '?limit=' + String(pagesize) +\n            '&offset=' + String((page - 1) * pagesize) +\n            '&q=' + encodeURIComponent(String(query));\n\n        return this._get(params) as unknown as Promise<AxiosResponse<PaginatedResponse<PhysicalToken>>>;\n    }\n\n    listParams(this: PhysicalTokenService, params: PhysicalTokenListParams): Promise<PaginatedResponse<PhysicalToken>> {\n        params = params || {};\n\n        params.pagesize = params.pagesize || 1000;\n        params.page = params.page || 1;\n        params.query = params.query || '';\n        params.fields = params.fields || ['id'];\n        params.ids = params.ids || [];\n\n        const query =\n            '?limit=' + String(params.pagesize) +\n            '&offset=' + String((params.page - 1) * params.pagesize) +\n            '&q=' + encodeURIComponent(String(params.query)) +\n            '&fields=' + params.fields.join(\"|\") +\n            '&ids=' + params.ids.join(\"|\");\n\n        return this._get(query) as unknown as Promise<PaginatedResponse<PhysicalToken>>;\n    }\n\n    listCreate(this: PhysicalTokenService, ids: Array<string>) {\n        return this._post('', {ids, });\n    }\n\n    listDelete(this: PhysicalTokenService, ids: Array<string>) {\n        return this._post('delete/', {ids, });\n    }\n\n    listAvailable(page=1, pagesize=50, query='', additionalCardNumber=''): Promise<PaginatedResponse<PhysicalToken>> {\n        const params =\n            '?limit=' + String(pagesize) +\n            '&offset=' + String((page - 1) * pagesize) +\n            '&type=available' +\n            '&q=' + encodeURIComponent(String(query)) +\n            '&additional=' + String(additionalCardNumber);\n\n        return this._get(params) as unknown as Promise<PaginatedResponse<PhysicalToken>>;\n    }\n}\n\nconst physicalTokenService = new PhysicalTokenService();\n\nexport { physicalTokenService, PhysicalTokenService, PhysicalToken }\n\nexport default physicalTokenService;\n","import { BaseService, FormField, FilterAttribute, PaginatedResponse } from './_base';\n\nimport { employeeGroupService, EmployeeGroup } from './employee-groups';\nimport { physicalTokenService, PhysicalToken } from './physical-tokens';\nimport { institutionService } from './institutions';\n\nimport branding from '../branding';\nimport { AxiosResponse } from 'axios';\n\ninterface Employee {\n    id: string;\n    created_at: string;\n    modified_at: string;\n    archived_at?: string;\n    username: string;\n    user_account_id: string;\n    employee_group_id?: string;\n    external_id?: string;\n    accounting_number?: string;\n    employee_group_name?: string;\n    is_male: boolean;\n    first_name: string;\n    last_name: string;\n    email?: string;\n    initial_password: string;\n    physical_token_id?: string;\n    can_be_deleted: boolean;\n    delete_after_archive_period?: number;\n}\n\ninterface EmployeesListParams {\n    page?: number;\n    pagesize?: number;\n    query?: string;\n    useCache?: boolean;\n\n    verbosity?: string;\n\n    ids?: Array<string>;\n    employeeGroups?: Array<string>;\n    showArchived?: boolean;\n    minimumAbsenceCount?: number;\n    absenceDaterange?: string;\n}\n\n\nclass EmployeeService extends BaseService<Employee> {\n    archivedFormFields: Array<FormField<any>>;\n\n    constructor() {\n        super(\"/api/v2/employees/employees/\");\n        this.formFields = [\n            new FormField<Employee>(\"first_name\", \"Vorname\", {autofocus: true}),\n            new FormField<Employee>(\"last_name\", \"Nachname\"),\n            new FormField<Employee>(\"email\", \"E-Mail-Adresse\", {\n                mobileType: \"stacked\",\n            }),\n            new FormField<EmployeeGroup>(\"employee_group_id\", \"Abteilung\", {\n                type: 'select',\n                remoteSourceService: employeeGroupService,\n                remoteSourceAttribute: \"name\"\n            }),\n            new FormField<PhysicalToken>(\"physical_token_id\", \"Token-Nummer\", {\n                type: 'select',\n                description: \"Die ausgewählte Token-Nummer kann zur Authentifizierung am Zeiterfassungs-Terminal verwendet werden. Nur nicht bereits zugewiesene Nummern werden angezeigt. <a target='_blank' href='/tokens/'>Token verwalten</a>\",\n                remoteSourceService: physicalTokenService,\n                remoteSourceListMethod: \"listAvailable\",\n                remoteSourceAttribute: 'id',\n                listPageSize: 1000,\n            }),\n            new FormField<Employee>(\"accounting_number\", \"Personalnummer\", { mobileType: 'stacked', description: \"Die Personalnummer wird verwendet, um den Mitarbeiter im Buchhaltungsexport zu identifizieren.\"}),\n        ];\n        if (branding.id == \"orange\")\n            this.formFields.push(new FormField<Employee>(\"external_id\", \"aQrate Benutzername\", { mobileType: 'stacked', description:  \"Der Benutzername wird verwendet, um diesen Zeitblick Mitarbeiter einem aQrate Mitarbeiter bei Authentifizierung am MFP zuzuordnen.\"}));\n        this.formFields = this.formFields.concat([\n            new FormField<Employee>(\"username\", branding.name + \" Benutzername\", {\n                mobileType: 'stacked',\n                description: \"Der Benutzername wird vom Mitarbeiter benötigt, um sich gegenüber der \" + branding.name + \" Smartphone App und dem Web-Login (https://\" + branding.url + \"/) zu authentifizieren.\",\n                isReadOnly: true,\n                showCreate: false,\n            }),\n            new FormField<Employee>(\"initial_password\", \"Vorläufiges Passwort\", { mobileType: 'stacked', isReadOnly: true, showCreate: false, }),\n        ]);\n\n        this.archivedFormFields = [\n            new FormField<Employee>(\"first_name\", \"Vorname\", {isReadOnly: true}),\n            new FormField<Employee>(\"last_name\", \"Nachname\", { isReadOnly: true }),\n            new FormField<Employee>(\"email\", \"E-Mail-Adresse\", { isReadOnly: true }),\n            new FormField<EmployeeGroup>(\"employee_group_id\", \"Abteilung\", {\n                type: 'select',\n                remoteSourceService: employeeGroupService,\n                remoteSourceAttribute: \"name\",\n                isReadOnly: true,\n            }),\n            new FormField<Employee>(\"accounting_id\", \"Personalnummer\", { description: \"Die Personalnummer wird verwendet, um den Mitarbeiter im Buchhaltungsexport zu identifizieren.\" , isReadOnly: true}),\n        ];\n        if (branding.id == \"orange\")\n            this.archivedFormFields.push(new FormField<Employee>(\"external_id\", \"aQrate Benutzername\", { description: \"Der Benutzername wird verwendet, um diesen Zeitblick Mitarbeiter einem aQrate Mitarbeiter bei Authentifizierung am MFP zuzuordnen.\", isReadOnly: true }));\n\n        this.filterAttributes = [\n            new FilterAttribute(\"showArchived\", \"Archivierte Mitarbeiter anzeigen\", \"boolean\", false, {\n                visible: this.listParams({ showArchived: true}).then((response: AxiosResponse<PaginatedResponse<EmployeeGroup>>) => {\n                    return response.data.count > 0;\n                }),\n            }),\n            new FilterAttribute(\"employeeGroups\", \"Abteilungen\", \"select\", undefined, {\n                multiple: true,\n                remoteSourceService: employeeGroupService,\n                visible: employeeGroupService.listParams({}).then((response: AxiosResponse<PaginatedResponse<EmployeeGroup>>) => {\n                    return response.data.count > 0;\n                }),\n            }),\n        ];\n\n        this.cacheTimeout = 60 * 60 * 24 * 14;\n    }\n\n    titleAttribute(): Promise<any> { return Promise.resolve((resource: any) => resource.first_name + \" \" + resource.last_name) }\n    newResourceTitle(resourceId?: string): Promise<string> { return Promise.resolve(\"Mitarbeiter hinzufügen\") }\n    newResourceConfirmation(resourceId?: string): Promise<string> { return Promise.resolve(\"Mitarbeiter hinzugefügt\") }\n\n    deleteResourceMethod(resourceId?: string): Promise<string> {\n        if (!resourceId) return Promise.resolve('');\n\n        return this.retrieve(resourceId).then(employeeResponse => {\n            if (employeeResponse.data.can_be_deleted) {\n                return Promise.resolve(\"delete\");\n            } else if (!employeeResponse.data.archived_at) {\n                return Promise.resolve(\"archive\");\n            }\n\n            return Promise.resolve('');\n        });\n    }\n    deleteResourceTitle(resourceId?: string): Promise<string> {\n        if (!resourceId) return Promise.resolve(\"Entfernen\");\n\n        return this.retrieve(resourceId).then(employeeResponse => {\n            if (employeeResponse.data.can_be_deleted) {\n                return Promise.resolve(\"Entfernen\");\n            } else if (!employeeResponse.data.archived_at) {\n                return Promise.resolve(\"Archivieren\");\n            }\n\n            return Promise.resolve('');\n        });\n    }\n    deleteResourceConfirmation(resourceId?: string): Promise<string> {\n        if (!resourceId) return Promise.resolve(\"Mitarbeiter entfernt\");\n\n        return this.retrieve(resourceId).then(employeeResponse => {\n            if (employeeResponse.data.can_be_deleted) {\n                return Promise.resolve(\"Mitarbeiter entfernt\");\n            } else if (!employeeResponse.data.archived_at) {\n                return Promise.resolve(\"Mitarbeiter archiviert\");\n            }\n\n            return Promise.resolve('');\n        });\n    }\n\n    async retrieveSettingValue(resourceId: string, categoryId: string, settingId: string): Promise<any> {\n        const employeeSettings = (await this.retrieveSettings(resourceId)).data;\n        if (categoryId in employeeSettings && settingId in employeeSettings[categoryId]) {\n            return employeeSettings[categoryId][settingId]\n        }\n\n        return institutionService.retrieveSettingValue(categoryId, settingId);\n\n    }\n\n    retrieveSettings(resourceId: string): Promise<AxiosResponse<any>> {\n        return this._get(resourceId + \"/settings/\") as unknown as Promise<AxiosResponse<any>>;\n    }\n\n    updateSettings(resourceId: string, newSettings: any) {\n        return this._post(resourceId + \"/settings/\", newSettings);\n    }\n\n    resetPassword(resourceId: string) {\n        return this._post(resourceId + \"/reset-password/\", {});\n    }\n\n    list(page=1, pagesize=50, query='', employeeGroups?: string, showArchived?: boolean) {\n        let params =\n            '?limit=' + String(pagesize) +\n            '&offset=' + String((page - 1) * pagesize) +\n            '&q=' + encodeURIComponent(String(query));\n\n        if (employeeGroups != undefined) {\n            params = params + '&employee_groups=' + employeeGroups;\n        }\n\n        if (showArchived === true) {\n            params = params + '&archived';\n        }\n\n        return this._get(params);\n    }\n\n    listParams(params: EmployeesListParams) {\n        const pagesize = params.pagesize || 50;\n        const page = params.page || 1;\n        const query = params.query || '';\n\n        let url =\n            '?limit=' + String(pagesize) +\n            '&offset=' + String((page - 1) * pagesize) +\n            '&q=' + encodeURIComponent(String(query));\n\n        if (params.verbosity) url += \"&verbosity=\" + params.verbosity;\n        if (params.ids) url += \"&ids=\" + params.ids.join(\"|\");\n        if (params.employeeGroups) url += \"&employee_groups=\" + params.employeeGroups.join(\"|\");\n        if (params.showArchived === true) url = url + '&archived';\n        if (params.minimumAbsenceCount) url = url + '&absence_count__gte=' + String(params.minimumAbsenceCount);\n        if (params.absenceDaterange) url = url + '&absence_daterange=' + params.absenceDaterange;\n\n        return this._get(url, params.useCache !== false);\n    }\n\n    archive(resourceId: string) {\n        return this._post(resourceId + \"/archive/\", {});\n    }\n}\n\nconst employeeService = new EmployeeService();\n\nexport { EmployeeService, employeeService, Employee };\n\nexport default employeeService;\n","const branding = process.env.VUE_APP_BRANDING as unknown as string;\n\nconst brands = new Map < string, any>();\n\nbrands.set(\"orange\", {\n    id: \"orange\",\n    name: \"TA Zeitblick\",\n    url: \"ta-zeitblick.de\",\n    colors: {\n        primary: '#FF8200',\n        success: '#28C76F',\n        danger: '#EA5455',\n        warning: '#FF9F43',\n        dark: '#1E1E1E',\n    },\n    isMobile: process.env.VUE_APP_IS_MOBILE == 'true',\n    supportPhone: '+49 1806 456326',\n    supportPhoneFootnote: 'Mo-Do 7 – 17 Uhr, Fr 7 - 16 Uhr, 20 Cent aus dem deutschen Festnetz, Mobilfunkpreise können abweichen, maximal jedoch 60 Cent pro Anruf',\n});\n\nbrands.set(\"red\", {\n    id: \"red\",\n    name: \"Zeitstrom\",\n    url: \"app.zeitstrom.com\",\n    colors: {\n        primary: '#DF4D44',\n        success: '#28C76F',\n        danger: '#EA5455',\n        warning: '#FF9F43',\n        dark: '#1E1E1E',\n    },\n    isMobile: process.env.VUE_APP_IS_MOBILE == 'true',\n    supportPhone: undefined,\n    supportPhoneFootnote: undefined,\n});\n\n\nexport default brands.get(branding || 'orange');\n"],"sourceRoot":""}